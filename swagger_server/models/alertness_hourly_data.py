# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AlertnessHourlyData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, validity: str=None, alertness_level: str=None, start_time: date=None, end_time: date=None):  # noqa: E501
        """AlertnessHourlyData - a model defined in Swagger

        :param validity: The validity of this AlertnessHourlyData.  # noqa: E501
        :type validity: str
        :param alertness_level: The alertness_level of this AlertnessHourlyData.  # noqa: E501
        :type alertness_level: str
        :param start_time: The start_time of this AlertnessHourlyData.  # noqa: E501
        :type start_time: date
        :param end_time: The end_time of this AlertnessHourlyData.  # noqa: E501
        :type end_time: date
        """
        self.swagger_types = {
            'validity': str,
            'alertness_level': str,
            'start_time': date,
            'end_time': date
        }

        self.attribute_map = {
            'validity': 'validity',
            'alertness_level': 'alertness_level',
            'start_time': 'start_time',
            'end_time': 'end_time'
        }
        self._validity = validity
        self._alertness_level = alertness_level
        self._start_time = start_time
        self._end_time = end_time

    @classmethod
    def from_dict(cls, dikt) -> 'AlertnessHourlyData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The alertness-hourly-data of this AlertnessHourlyData.  # noqa: E501
        :rtype: AlertnessHourlyData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def validity(self) -> str:
        """Gets the validity of this AlertnessHourlyData.

        Validity  # noqa: E501

        :return: The validity of this AlertnessHourlyData.
        :rtype: str
        """
        return self._validity

    @validity.setter
    def validity(self, validity: str):
        """Sets the validity of this AlertnessHourlyData.

        Validity  # noqa: E501

        :param validity: The validity of this AlertnessHourlyData.
        :type validity: str
        """
        allowed_values = ["VALIDITY_UNKNOWN", "VALIDITY_RESET", "VALIDITY_NOT_VALID", "VALIDITY_ESTIMATE", "VALIDITY_VALID"]  # noqa: E501
        if validity not in allowed_values:
            raise ValueError(
                "Invalid value for `validity` ({0}), must be one of {1}"
                .format(validity, allowed_values)
            )

        self._validity = validity

    @property
    def alertness_level(self) -> str:
        """Gets the alertness_level of this AlertnessHourlyData.

        Alertness level  # noqa: E501

        :return: The alertness_level of this AlertnessHourlyData.
        :rtype: str
        """
        return self._alertness_level

    @alertness_level.setter
    def alertness_level(self, alertness_level: str):
        """Sets the alertness_level of this AlertnessHourlyData.

        Alertness level  # noqa: E501

        :param alertness_level: The alertness_level of this AlertnessHourlyData.
        :type alertness_level: str
        """
        allowed_values = ["ALERTNESS_LEVEL_UNKNOWN", "ALERTNESS_LEVEL_MINIMAL", "ALERTNESS_LEVEL_VERY_LOW", "ALERTNESS_LEVEL_LOW", "ALERTNESS_LEVEL_HIGH", "ALERTNESS_LEVEL_VERY_HIGH"]  # noqa: E501
        if alertness_level not in allowed_values:
            raise ValueError(
                "Invalid value for `alertness_level` ({0}), must be one of {1}"
                .format(alertness_level, allowed_values)
            )

        self._alertness_level = alertness_level

    @property
    def start_time(self) -> date:
        """Gets the start_time of this AlertnessHourlyData.

        Alertness period start time (UTC)  # noqa: E501

        :return: The start_time of this AlertnessHourlyData.
        :rtype: date
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: date):
        """Sets the start_time of this AlertnessHourlyData.

        Alertness period start time (UTC)  # noqa: E501

        :param start_time: The start_time of this AlertnessHourlyData.
        :type start_time: date
        """

        self._start_time = start_time

    @property
    def end_time(self) -> date:
        """Gets the end_time of this AlertnessHourlyData.

        Alertness period end time (UTC)  # noqa: E501

        :return: The end_time of this AlertnessHourlyData.
        :rtype: date
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: date):
        """Sets the end_time of this AlertnessHourlyData.

        Alertness period end time (UTC)  # noqa: E501

        :param end_time: The end_time of this AlertnessHourlyData.
        :type end_time: date
        """

        self._end_time = end_time

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.continuousheartrate_heart_rate_samples import ContinuousheartrateHeartRateSamples  # noqa: F401,E501
from swagger_server import util


class ContinuousHeartrate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, polar_user: str=None, _date: date=None, heart_rate_samples: ContinuousheartrateHeartRateSamples=None):  # noqa: E501
        """ContinuousHeartrate - a model defined in Swagger

        :param polar_user: The polar_user of this ContinuousHeartrate.  # noqa: E501
        :type polar_user: str
        :param _date: The _date of this ContinuousHeartrate.  # noqa: E501
        :type _date: date
        :param heart_rate_samples: The heart_rate_samples of this ContinuousHeartrate.  # noqa: E501
        :type heart_rate_samples: ContinuousheartrateHeartRateSamples
        """
        self.swagger_types = {
            'polar_user': str,
            '_date': date,
            'heart_rate_samples': ContinuousheartrateHeartRateSamples
        }

        self.attribute_map = {
            'polar_user': 'polar_user',
            '_date': 'date',
            'heart_rate_samples': 'heart_rate_samples'
        }
        self._polar_user = polar_user
        self.__date = _date
        self._heart_rate_samples = heart_rate_samples

    @classmethod
    def from_dict(cls, dikt) -> 'ContinuousHeartrate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The continuous-heartrate of this ContinuousHeartrate.  # noqa: E501
        :rtype: ContinuousHeartrate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def polar_user(self) -> str:
        """Gets the polar_user of this ContinuousHeartrate.

        Absolute link to user owning the continuous heart rate samples  # noqa: E501

        :return: The polar_user of this ContinuousHeartrate.
        :rtype: str
        """
        return self._polar_user

    @polar_user.setter
    def polar_user(self, polar_user: str):
        """Sets the polar_user of this ContinuousHeartrate.

        Absolute link to user owning the continuous heart rate samples  # noqa: E501

        :param polar_user: The polar_user of this ContinuousHeartrate.
        :type polar_user: str
        """

        self._polar_user = polar_user

    @property
    def _date(self) -> date:
        """Gets the _date of this ContinuousHeartrate.

        Result date of the Continuous Heart Rate  # noqa: E501

        :return: The _date of this ContinuousHeartrate.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this ContinuousHeartrate.

        Result date of the Continuous Heart Rate  # noqa: E501

        :param _date: The _date of this ContinuousHeartrate.
        :type _date: date
        """

        self.__date = _date

    @property
    def heart_rate_samples(self) -> ContinuousheartrateHeartRateSamples:
        """Gets the heart_rate_samples of this ContinuousHeartrate.


        :return: The heart_rate_samples of this ContinuousHeartrate.
        :rtype: ContinuousheartrateHeartRateSamples
        """
        return self._heart_rate_samples

    @heart_rate_samples.setter
    def heart_rate_samples(self, heart_rate_samples: ContinuousheartrateHeartRateSamples):
        """Sets the heart_rate_samples of this ContinuousHeartrate.


        :param heart_rate_samples: The heart_rate_samples of this ContinuousHeartrate.
        :type heart_rate_samples: ContinuousheartrateHeartRateSamples
        """

        self._heart_rate_samples = heart_rate_samples

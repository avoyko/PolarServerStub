# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PhysicalInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, transaction_id: int=None, created: str=None, polar_user: str=None, weight: float=None, height: float=None, maximum_heart_rate: int=None, resting_heart_rate: int=None, aerobic_threshold: int=None, anaerobic_threshold: int=None, vo2_max: int=None, weight_source: str=None):  # noqa: E501
        """PhysicalInformation - a model defined in Swagger

        :param id: The id of this PhysicalInformation.  # noqa: E501
        :type id: int
        :param transaction_id: The transaction_id of this PhysicalInformation.  # noqa: E501
        :type transaction_id: int
        :param created: The created of this PhysicalInformation.  # noqa: E501
        :type created: str
        :param polar_user: The polar_user of this PhysicalInformation.  # noqa: E501
        :type polar_user: str
        :param weight: The weight of this PhysicalInformation.  # noqa: E501
        :type weight: float
        :param height: The height of this PhysicalInformation.  # noqa: E501
        :type height: float
        :param maximum_heart_rate: The maximum_heart_rate of this PhysicalInformation.  # noqa: E501
        :type maximum_heart_rate: int
        :param resting_heart_rate: The resting_heart_rate of this PhysicalInformation.  # noqa: E501
        :type resting_heart_rate: int
        :param aerobic_threshold: The aerobic_threshold of this PhysicalInformation.  # noqa: E501
        :type aerobic_threshold: int
        :param anaerobic_threshold: The anaerobic_threshold of this PhysicalInformation.  # noqa: E501
        :type anaerobic_threshold: int
        :param vo2_max: The vo2_max of this PhysicalInformation.  # noqa: E501
        :type vo2_max: int
        :param weight_source: The weight_source of this PhysicalInformation.  # noqa: E501
        :type weight_source: str
        """
        self.swagger_types = {
            'id': int,
            'transaction_id': int,
            'created': str,
            'polar_user': str,
            'weight': float,
            'height': float,
            'maximum_heart_rate': int,
            'resting_heart_rate': int,
            'aerobic_threshold': int,
            'anaerobic_threshold': int,
            'vo2_max': int,
            'weight_source': str
        }

        self.attribute_map = {
            'id': 'id',
            'transaction_id': 'transaction-id',
            'created': 'created',
            'polar_user': 'polar-user',
            'weight': 'weight',
            'height': 'height',
            'maximum_heart_rate': 'maximum-heart-rate',
            'resting_heart_rate': 'resting-heart-rate',
            'aerobic_threshold': 'aerobic-threshold',
            'anaerobic_threshold': 'anaerobic-threshold',
            'vo2_max': 'vo2-max',
            'weight_source': 'weight-source'
        }
        self._id = id
        self._transaction_id = transaction_id
        self._created = created
        self._polar_user = polar_user
        self._weight = weight
        self._height = height
        self._maximum_heart_rate = maximum_heart_rate
        self._resting_heart_rate = resting_heart_rate
        self._aerobic_threshold = aerobic_threshold
        self._anaerobic_threshold = anaerobic_threshold
        self._vo2_max = vo2_max
        self._weight_source = weight_source

    @classmethod
    def from_dict(cls, dikt) -> 'PhysicalInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The physical-information of this PhysicalInformation.  # noqa: E501
        :rtype: PhysicalInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this PhysicalInformation.

        Physical information id  # noqa: E501

        :return: The id of this PhysicalInformation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this PhysicalInformation.

        Physical information id  # noqa: E501

        :param id: The id of this PhysicalInformation.
        :type id: int
        """

        self._id = id

    @property
    def transaction_id(self) -> int:
        """Gets the transaction_id of this PhysicalInformation.

        Id of the physical-information-transaction this training was transferred in  # noqa: E501

        :return: The transaction_id of this PhysicalInformation.
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: int):
        """Sets the transaction_id of this PhysicalInformation.

        Id of the physical-information-transaction this training was transferred in  # noqa: E501

        :param transaction_id: The transaction_id of this PhysicalInformation.
        :type transaction_id: int
        """

        self._transaction_id = transaction_id

    @property
    def created(self) -> str:
        """Gets the created of this PhysicalInformation.

        The time physical information was created in AccessLink, in format YYYY-MM-DDTHH:mm:ss.SSSZ  # noqa: E501

        :return: The created of this PhysicalInformation.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this PhysicalInformation.

        The time physical information was created in AccessLink, in format YYYY-MM-DDTHH:mm:ss.SSSZ  # noqa: E501

        :param created: The created of this PhysicalInformation.
        :type created: str
        """

        self._created = created

    @property
    def polar_user(self) -> str:
        """Gets the polar_user of this PhysicalInformation.

        Absolute link to user owning the activity  # noqa: E501

        :return: The polar_user of this PhysicalInformation.
        :rtype: str
        """
        return self._polar_user

    @polar_user.setter
    def polar_user(self, polar_user: str):
        """Sets the polar_user of this PhysicalInformation.

        Absolute link to user owning the activity  # noqa: E501

        :param polar_user: The polar_user of this PhysicalInformation.
        :type polar_user: str
        """

        self._polar_user = polar_user

    @property
    def weight(self) -> float:
        """Gets the weight of this PhysicalInformation.

        Weight  # noqa: E501

        :return: The weight of this PhysicalInformation.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight: float):
        """Sets the weight of this PhysicalInformation.

        Weight  # noqa: E501

        :param weight: The weight of this PhysicalInformation.
        :type weight: float
        """

        self._weight = weight

    @property
    def height(self) -> float:
        """Gets the height of this PhysicalInformation.

        Height  # noqa: E501

        :return: The height of this PhysicalInformation.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height: float):
        """Sets the height of this PhysicalInformation.

        Height  # noqa: E501

        :param height: The height of this PhysicalInformation.
        :type height: float
        """

        self._height = height

    @property
    def maximum_heart_rate(self) -> int:
        """Gets the maximum_heart_rate of this PhysicalInformation.

        Maximum heart rate  # noqa: E501

        :return: The maximum_heart_rate of this PhysicalInformation.
        :rtype: int
        """
        return self._maximum_heart_rate

    @maximum_heart_rate.setter
    def maximum_heart_rate(self, maximum_heart_rate: int):
        """Sets the maximum_heart_rate of this PhysicalInformation.

        Maximum heart rate  # noqa: E501

        :param maximum_heart_rate: The maximum_heart_rate of this PhysicalInformation.
        :type maximum_heart_rate: int
        """

        self._maximum_heart_rate = maximum_heart_rate

    @property
    def resting_heart_rate(self) -> int:
        """Gets the resting_heart_rate of this PhysicalInformation.

        Resting hear rate  # noqa: E501

        :return: The resting_heart_rate of this PhysicalInformation.
        :rtype: int
        """
        return self._resting_heart_rate

    @resting_heart_rate.setter
    def resting_heart_rate(self, resting_heart_rate: int):
        """Sets the resting_heart_rate of this PhysicalInformation.

        Resting hear rate  # noqa: E501

        :param resting_heart_rate: The resting_heart_rate of this PhysicalInformation.
        :type resting_heart_rate: int
        """

        self._resting_heart_rate = resting_heart_rate

    @property
    def aerobic_threshold(self) -> int:
        """Gets the aerobic_threshold of this PhysicalInformation.

        Aerobic threshold  # noqa: E501

        :return: The aerobic_threshold of this PhysicalInformation.
        :rtype: int
        """
        return self._aerobic_threshold

    @aerobic_threshold.setter
    def aerobic_threshold(self, aerobic_threshold: int):
        """Sets the aerobic_threshold of this PhysicalInformation.

        Aerobic threshold  # noqa: E501

        :param aerobic_threshold: The aerobic_threshold of this PhysicalInformation.
        :type aerobic_threshold: int
        """

        self._aerobic_threshold = aerobic_threshold

    @property
    def anaerobic_threshold(self) -> int:
        """Gets the anaerobic_threshold of this PhysicalInformation.

        Anaerobic threshold  # noqa: E501

        :return: The anaerobic_threshold of this PhysicalInformation.
        :rtype: int
        """
        return self._anaerobic_threshold

    @anaerobic_threshold.setter
    def anaerobic_threshold(self, anaerobic_threshold: int):
        """Sets the anaerobic_threshold of this PhysicalInformation.

        Anaerobic threshold  # noqa: E501

        :param anaerobic_threshold: The anaerobic_threshold of this PhysicalInformation.
        :type anaerobic_threshold: int
        """

        self._anaerobic_threshold = anaerobic_threshold

    @property
    def vo2_max(self) -> int:
        """Gets the vo2_max of this PhysicalInformation.

        VO2 max  # noqa: E501

        :return: The vo2_max of this PhysicalInformation.
        :rtype: int
        """
        return self._vo2_max

    @vo2_max.setter
    def vo2_max(self, vo2_max: int):
        """Sets the vo2_max of this PhysicalInformation.

        VO2 max  # noqa: E501

        :param vo2_max: The vo2_max of this PhysicalInformation.
        :type vo2_max: int
        """

        self._vo2_max = vo2_max

    @property
    def weight_source(self) -> str:
        """Gets the weight_source of this PhysicalInformation.

        Weight source  # noqa: E501

        :return: The weight_source of this PhysicalInformation.
        :rtype: str
        """
        return self._weight_source

    @weight_source.setter
    def weight_source(self, weight_source: str):
        """Sets the weight_source of this PhysicalInformation.

        Weight source  # noqa: E501

        :param weight_source: The weight_source of this PhysicalInformation.
        :type weight_source: str
        """
        allowed_values = ["SOURCE_MEASURED", "SOURCE_USER"]  # noqa: E501
        if weight_source not in allowed_values:
            raise ValueError(
                "Invalid value for `weight_source` ({0}), must be one of {1}"
                .format(weight_source, allowed_values)
            )

        self._weight_source = weight_source

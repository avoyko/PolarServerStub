# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.cardio_load_levels import CardioLoadLevels  # noqa: F401,E501
from swagger_server.models.cardio_load_status_enum import CardioLoadStatusEnum  # noqa: F401,E501
from swagger_server import util


class CardioLoad(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: date=None, cardio_load_status: CardioLoadStatusEnum=None, cardio_load: float=None, strain: float=None, tolerance: float=None, cardio_load_ratio: float=None, cardio_load_level: CardioLoadLevels=None):  # noqa: E501
        """CardioLoad - a model defined in Swagger

        :param _date: The _date of this CardioLoad.  # noqa: E501
        :type _date: date
        :param cardio_load_status: The cardio_load_status of this CardioLoad.  # noqa: E501
        :type cardio_load_status: CardioLoadStatusEnum
        :param cardio_load: The cardio_load of this CardioLoad.  # noqa: E501
        :type cardio_load: float
        :param strain: The strain of this CardioLoad.  # noqa: E501
        :type strain: float
        :param tolerance: The tolerance of this CardioLoad.  # noqa: E501
        :type tolerance: float
        :param cardio_load_ratio: The cardio_load_ratio of this CardioLoad.  # noqa: E501
        :type cardio_load_ratio: float
        :param cardio_load_level: The cardio_load_level of this CardioLoad.  # noqa: E501
        :type cardio_load_level: CardioLoadLevels
        """
        self.swagger_types = {
            '_date': date,
            'cardio_load_status': CardioLoadStatusEnum,
            'cardio_load': float,
            'strain': float,
            'tolerance': float,
            'cardio_load_ratio': float,
            'cardio_load_level': CardioLoadLevels
        }

        self.attribute_map = {
            '_date': 'date',
            'cardio_load_status': 'cardio_load_status',
            'cardio_load': 'cardio_load',
            'strain': 'strain',
            'tolerance': 'tolerance',
            'cardio_load_ratio': 'cardio_load_ratio',
            'cardio_load_level': 'cardio_load_level'
        }
        self.__date = _date
        self._cardio_load_status = cardio_load_status
        self._cardio_load = cardio_load
        self._strain = strain
        self._tolerance = tolerance
        self._cardio_load_ratio = cardio_load_ratio
        self._cardio_load_level = cardio_load_level

    @classmethod
    def from_dict(cls, dikt) -> 'CardioLoad':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The cardio-load of this CardioLoad.  # noqa: E501
        :rtype: CardioLoad
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> date:
        """Gets the _date of this CardioLoad.

        Date in format YYYY-MM-DD.  # noqa: E501

        :return: The _date of this CardioLoad.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this CardioLoad.

        Date in format YYYY-MM-DD.  # noqa: E501

        :param _date: The _date of this CardioLoad.
        :type _date: date
        """

        self.__date = _date

    @property
    def cardio_load_status(self) -> CardioLoadStatusEnum:
        """Gets the cardio_load_status of this CardioLoad.


        :return: The cardio_load_status of this CardioLoad.
        :rtype: CardioLoadStatusEnum
        """
        return self._cardio_load_status

    @cardio_load_status.setter
    def cardio_load_status(self, cardio_load_status: CardioLoadStatusEnum):
        """Sets the cardio_load_status of this CardioLoad.


        :param cardio_load_status: The cardio_load_status of this CardioLoad.
        :type cardio_load_status: CardioLoadStatusEnum
        """

        self._cardio_load_status = cardio_load_status

    @property
    def cardio_load(self) -> float:
        """Gets the cardio_load of this CardioLoad.

        Cardio load (training impulse, TRIMP) shows your cardiac response to a training session.  # noqa: E501

        :return: The cardio_load of this CardioLoad.
        :rtype: float
        """
        return self._cardio_load

    @cardio_load.setter
    def cardio_load(self, cardio_load: float):
        """Sets the cardio_load of this CardioLoad.

        Cardio load (training impulse, TRIMP) shows your cardiac response to a training session.  # noqa: E501

        :param cardio_load: The cardio_load of this CardioLoad.
        :type cardio_load: float
        """

        self._cardio_load = cardio_load

    @property
    def strain(self) -> float:
        """Gets the strain of this CardioLoad.

        Strain shows how much you have strained yourself with training lately. It shows your average daily load from the past 7 days.  # noqa: E501

        :return: The strain of this CardioLoad.
        :rtype: float
        """
        return self._strain

    @strain.setter
    def strain(self, strain: float):
        """Sets the strain of this CardioLoad.

        Strain shows how much you have strained yourself with training lately. It shows your average daily load from the past 7 days.  # noqa: E501

        :param strain: The strain of this CardioLoad.
        :type strain: float
        """

        self._strain = strain

    @property
    def tolerance(self) -> float:
        """Gets the tolerance of this CardioLoad.

        Tolerance describes how prepared you are to endure cardio training. It shows your average daily load from the past 28 days.  # noqa: E501

        :return: The tolerance of this CardioLoad.
        :rtype: float
        """
        return self._tolerance

    @tolerance.setter
    def tolerance(self, tolerance: float):
        """Sets the tolerance of this CardioLoad.

        Tolerance describes how prepared you are to endure cardio training. It shows your average daily load from the past 28 days.  # noqa: E501

        :param tolerance: The tolerance of this CardioLoad.
        :type tolerance: float
        """

        self._tolerance = tolerance

    @property
    def cardio_load_ratio(self) -> float:
        """Gets the cardio_load_ratio of this CardioLoad.

        Ratio between strain and tolerance.  # noqa: E501

        :return: The cardio_load_ratio of this CardioLoad.
        :rtype: float
        """
        return self._cardio_load_ratio

    @cardio_load_ratio.setter
    def cardio_load_ratio(self, cardio_load_ratio: float):
        """Sets the cardio_load_ratio of this CardioLoad.

        Ratio between strain and tolerance.  # noqa: E501

        :param cardio_load_ratio: The cardio_load_ratio of this CardioLoad.
        :type cardio_load_ratio: float
        """

        self._cardio_load_ratio = cardio_load_ratio

    @property
    def cardio_load_level(self) -> CardioLoadLevels:
        """Gets the cardio_load_level of this CardioLoad.


        :return: The cardio_load_level of this CardioLoad.
        :rtype: CardioLoadLevels
        """
        return self._cardio_load_level

    @cardio_load_level.setter
    def cardio_load_level(self, cardio_load_level: CardioLoadLevels):
        """Sets the cardio_load_level of this CardioLoad.


        :param cardio_load_level: The cardio_load_level of this CardioLoad.
        :type cardio_load_level: CardioLoadLevels
        """

        self._cardio_load_level = cardio_load_level

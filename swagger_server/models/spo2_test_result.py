# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Spo2TestResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source_device_id: str=None, test_time: int=None, time_zone_offset: int=None, test_status: str=None, blood_oxygen_percent: int=None, spo2_class: str=None, spo2_value_deviation_from_baseline: str=None, spo2_quality_average_percent: float=None, average_heart_rate_bpm: int=None, heart_rate_variability_ms: float=None, spo2_hrv_deviation_from_baseline: str=None, altitude_meters: float=None):  # noqa: E501
        """Spo2TestResult - a model defined in Swagger

        :param source_device_id: The source_device_id of this Spo2TestResult.  # noqa: E501
        :type source_device_id: str
        :param test_time: The test_time of this Spo2TestResult.  # noqa: E501
        :type test_time: int
        :param time_zone_offset: The time_zone_offset of this Spo2TestResult.  # noqa: E501
        :type time_zone_offset: int
        :param test_status: The test_status of this Spo2TestResult.  # noqa: E501
        :type test_status: str
        :param blood_oxygen_percent: The blood_oxygen_percent of this Spo2TestResult.  # noqa: E501
        :type blood_oxygen_percent: int
        :param spo2_class: The spo2_class of this Spo2TestResult.  # noqa: E501
        :type spo2_class: str
        :param spo2_value_deviation_from_baseline: The spo2_value_deviation_from_baseline of this Spo2TestResult.  # noqa: E501
        :type spo2_value_deviation_from_baseline: str
        :param spo2_quality_average_percent: The spo2_quality_average_percent of this Spo2TestResult.  # noqa: E501
        :type spo2_quality_average_percent: float
        :param average_heart_rate_bpm: The average_heart_rate_bpm of this Spo2TestResult.  # noqa: E501
        :type average_heart_rate_bpm: int
        :param heart_rate_variability_ms: The heart_rate_variability_ms of this Spo2TestResult.  # noqa: E501
        :type heart_rate_variability_ms: float
        :param spo2_hrv_deviation_from_baseline: The spo2_hrv_deviation_from_baseline of this Spo2TestResult.  # noqa: E501
        :type spo2_hrv_deviation_from_baseline: str
        :param altitude_meters: The altitude_meters of this Spo2TestResult.  # noqa: E501
        :type altitude_meters: float
        """
        self.swagger_types = {
            'source_device_id': str,
            'test_time': int,
            'time_zone_offset': int,
            'test_status': str,
            'blood_oxygen_percent': int,
            'spo2_class': str,
            'spo2_value_deviation_from_baseline': str,
            'spo2_quality_average_percent': float,
            'average_heart_rate_bpm': int,
            'heart_rate_variability_ms': float,
            'spo2_hrv_deviation_from_baseline': str,
            'altitude_meters': float
        }

        self.attribute_map = {
            'source_device_id': 'source_device_id',
            'test_time': 'test_time',
            'time_zone_offset': 'time_zone_offset',
            'test_status': 'test_status',
            'blood_oxygen_percent': 'blood_oxygen_percent',
            'spo2_class': 'spo2_class',
            'spo2_value_deviation_from_baseline': 'spo2_value_deviation_from_baseline',
            'spo2_quality_average_percent': 'spo2_quality_average_percent',
            'average_heart_rate_bpm': 'average_heart_rate_bpm',
            'heart_rate_variability_ms': 'heart_rate_variability_ms',
            'spo2_hrv_deviation_from_baseline': 'spo2_hrv_deviation_from_baseline',
            'altitude_meters': 'altitude_meters'
        }
        self._source_device_id = source_device_id
        self._test_time = test_time
        self._time_zone_offset = time_zone_offset
        self._test_status = test_status
        self._blood_oxygen_percent = blood_oxygen_percent
        self._spo2_class = spo2_class
        self._spo2_value_deviation_from_baseline = spo2_value_deviation_from_baseline
        self._spo2_quality_average_percent = spo2_quality_average_percent
        self._average_heart_rate_bpm = average_heart_rate_bpm
        self._heart_rate_variability_ms = heart_rate_variability_ms
        self._spo2_hrv_deviation_from_baseline = spo2_hrv_deviation_from_baseline
        self._altitude_meters = altitude_meters

    @classmethod
    def from_dict(cls, dikt) -> 'Spo2TestResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The spo2-test-result of this Spo2TestResult.  # noqa: E501
        :rtype: Spo2TestResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_device_id(self) -> str:
        """Gets the source_device_id of this Spo2TestResult.


        :return: The source_device_id of this Spo2TestResult.
        :rtype: str
        """
        return self._source_device_id

    @source_device_id.setter
    def source_device_id(self, source_device_id: str):
        """Sets the source_device_id of this Spo2TestResult.


        :param source_device_id: The source_device_id of this Spo2TestResult.
        :type source_device_id: str
        """

        self._source_device_id = source_device_id

    @property
    def test_time(self) -> int:
        """Gets the test_time of this Spo2TestResult.


        :return: The test_time of this Spo2TestResult.
        :rtype: int
        """
        return self._test_time

    @test_time.setter
    def test_time(self, test_time: int):
        """Sets the test_time of this Spo2TestResult.


        :param test_time: The test_time of this Spo2TestResult.
        :type test_time: int
        """

        self._test_time = test_time

    @property
    def time_zone_offset(self) -> int:
        """Gets the time_zone_offset of this Spo2TestResult.


        :return: The time_zone_offset of this Spo2TestResult.
        :rtype: int
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset: int):
        """Sets the time_zone_offset of this Spo2TestResult.


        :param time_zone_offset: The time_zone_offset of this Spo2TestResult.
        :type time_zone_offset: int
        """

        self._time_zone_offset = time_zone_offset

    @property
    def test_status(self) -> str:
        """Gets the test_status of this Spo2TestResult.


        :return: The test_status of this Spo2TestResult.
        :rtype: str
        """
        return self._test_status

    @test_status.setter
    def test_status(self, test_status: str):
        """Sets the test_status of this Spo2TestResult.


        :param test_status: The test_status of this Spo2TestResult.
        :type test_status: str
        """
        allowed_values = ["SPO2_TEST_PASSED", "SPO2_TEST_INCONCLUSIVE_TOO_LOW_QUALITY_IN_SAMPLES", "SPO2_TEST_INCONCLUSIVE_TOO_LOW_OVERALL_QUALITY", "SPO2_TEST_INCONCLUSIVE_TOO_MANY_MISSING_SAMPLES"]  # noqa: E501
        if test_status not in allowed_values:
            raise ValueError(
                "Invalid value for `test_status` ({0}), must be one of {1}"
                .format(test_status, allowed_values)
            )

        self._test_status = test_status

    @property
    def blood_oxygen_percent(self) -> int:
        """Gets the blood_oxygen_percent of this Spo2TestResult.


        :return: The blood_oxygen_percent of this Spo2TestResult.
        :rtype: int
        """
        return self._blood_oxygen_percent

    @blood_oxygen_percent.setter
    def blood_oxygen_percent(self, blood_oxygen_percent: int):
        """Sets the blood_oxygen_percent of this Spo2TestResult.


        :param blood_oxygen_percent: The blood_oxygen_percent of this Spo2TestResult.
        :type blood_oxygen_percent: int
        """

        self._blood_oxygen_percent = blood_oxygen_percent

    @property
    def spo2_class(self) -> str:
        """Gets the spo2_class of this Spo2TestResult.


        :return: The spo2_class of this Spo2TestResult.
        :rtype: str
        """
        return self._spo2_class

    @spo2_class.setter
    def spo2_class(self, spo2_class: str):
        """Sets the spo2_class of this Spo2TestResult.


        :param spo2_class: The spo2_class of this Spo2TestResult.
        :type spo2_class: str
        """
        allowed_values = ["SPO2_CLASS_UNKNOWN", "SPO2_CLASS_VERY_LOW", "SPO2_CLASS_LOW", "SPO2_CLASS_NORMAL"]  # noqa: E501
        if spo2_class not in allowed_values:
            raise ValueError(
                "Invalid value for `spo2_class` ({0}), must be one of {1}"
                .format(spo2_class, allowed_values)
            )

        self._spo2_class = spo2_class

    @property
    def spo2_value_deviation_from_baseline(self) -> str:
        """Gets the spo2_value_deviation_from_baseline of this Spo2TestResult.


        :return: The spo2_value_deviation_from_baseline of this Spo2TestResult.
        :rtype: str
        """
        return self._spo2_value_deviation_from_baseline

    @spo2_value_deviation_from_baseline.setter
    def spo2_value_deviation_from_baseline(self, spo2_value_deviation_from_baseline: str):
        """Sets the spo2_value_deviation_from_baseline of this Spo2TestResult.


        :param spo2_value_deviation_from_baseline: The spo2_value_deviation_from_baseline of this Spo2TestResult.
        :type spo2_value_deviation_from_baseline: str
        """
        allowed_values = ["DEVIATION_NO_BASELINE", "DEVIATION_BELOW_USUAL", "DEVIATION_USUAL", "DEVIATION_ABOVE_USUAL"]  # noqa: E501
        if spo2_value_deviation_from_baseline not in allowed_values:
            raise ValueError(
                "Invalid value for `spo2_value_deviation_from_baseline` ({0}), must be one of {1}"
                .format(spo2_value_deviation_from_baseline, allowed_values)
            )

        self._spo2_value_deviation_from_baseline = spo2_value_deviation_from_baseline

    @property
    def spo2_quality_average_percent(self) -> float:
        """Gets the spo2_quality_average_percent of this Spo2TestResult.


        :return: The spo2_quality_average_percent of this Spo2TestResult.
        :rtype: float
        """
        return self._spo2_quality_average_percent

    @spo2_quality_average_percent.setter
    def spo2_quality_average_percent(self, spo2_quality_average_percent: float):
        """Sets the spo2_quality_average_percent of this Spo2TestResult.


        :param spo2_quality_average_percent: The spo2_quality_average_percent of this Spo2TestResult.
        :type spo2_quality_average_percent: float
        """

        self._spo2_quality_average_percent = spo2_quality_average_percent

    @property
    def average_heart_rate_bpm(self) -> int:
        """Gets the average_heart_rate_bpm of this Spo2TestResult.


        :return: The average_heart_rate_bpm of this Spo2TestResult.
        :rtype: int
        """
        return self._average_heart_rate_bpm

    @average_heart_rate_bpm.setter
    def average_heart_rate_bpm(self, average_heart_rate_bpm: int):
        """Sets the average_heart_rate_bpm of this Spo2TestResult.


        :param average_heart_rate_bpm: The average_heart_rate_bpm of this Spo2TestResult.
        :type average_heart_rate_bpm: int
        """

        self._average_heart_rate_bpm = average_heart_rate_bpm

    @property
    def heart_rate_variability_ms(self) -> float:
        """Gets the heart_rate_variability_ms of this Spo2TestResult.


        :return: The heart_rate_variability_ms of this Spo2TestResult.
        :rtype: float
        """
        return self._heart_rate_variability_ms

    @heart_rate_variability_ms.setter
    def heart_rate_variability_ms(self, heart_rate_variability_ms: float):
        """Sets the heart_rate_variability_ms of this Spo2TestResult.


        :param heart_rate_variability_ms: The heart_rate_variability_ms of this Spo2TestResult.
        :type heart_rate_variability_ms: float
        """

        self._heart_rate_variability_ms = heart_rate_variability_ms

    @property
    def spo2_hrv_deviation_from_baseline(self) -> str:
        """Gets the spo2_hrv_deviation_from_baseline of this Spo2TestResult.


        :return: The spo2_hrv_deviation_from_baseline of this Spo2TestResult.
        :rtype: str
        """
        return self._spo2_hrv_deviation_from_baseline

    @spo2_hrv_deviation_from_baseline.setter
    def spo2_hrv_deviation_from_baseline(self, spo2_hrv_deviation_from_baseline: str):
        """Sets the spo2_hrv_deviation_from_baseline of this Spo2TestResult.


        :param spo2_hrv_deviation_from_baseline: The spo2_hrv_deviation_from_baseline of this Spo2TestResult.
        :type spo2_hrv_deviation_from_baseline: str
        """
        allowed_values = ["DEVIATION_NO_BASELINE", "DEVIATION_BELOW_USUAL", "DEVIATION_USUAL", "DEVIATION_ABOVE_USUAL"]  # noqa: E501
        if spo2_hrv_deviation_from_baseline not in allowed_values:
            raise ValueError(
                "Invalid value for `spo2_hrv_deviation_from_baseline` ({0}), must be one of {1}"
                .format(spo2_hrv_deviation_from_baseline, allowed_values)
            )

        self._spo2_hrv_deviation_from_baseline = spo2_hrv_deviation_from_baseline

    @property
    def altitude_meters(self) -> float:
        """Gets the altitude_meters of this Spo2TestResult.


        :return: The altitude_meters of this Spo2TestResult.
        :rtype: float
        """
        return self._altitude_meters

    @altitude_meters.setter
    def altitude_meters(self, altitude_meters: float):
        """Sets the altitude_meters of this Spo2TestResult.


        :param altitude_meters: The altitude_meters of this Spo2TestResult.
        :type altitude_meters: float
        """

        self._altitude_meters = altitude_meters

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NightlyRecharge(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, polar_user: str=None, _date: date=None, heart_rate_avg: int=None, beat_to_beat_avg: int=None, heart_rate_variability_avg: int=None, breathing_rate_avg: float=None, nightly_recharge_status: int=None, ans_charge: float=None, ans_charge_status: int=None, hrv_samples: object=None, breathing_samples: object=None):  # noqa: E501
        """NightlyRecharge - a model defined in Swagger

        :param polar_user: The polar_user of this NightlyRecharge.  # noqa: E501
        :type polar_user: str
        :param _date: The _date of this NightlyRecharge.  # noqa: E501
        :type _date: date
        :param heart_rate_avg: The heart_rate_avg of this NightlyRecharge.  # noqa: E501
        :type heart_rate_avg: int
        :param beat_to_beat_avg: The beat_to_beat_avg of this NightlyRecharge.  # noqa: E501
        :type beat_to_beat_avg: int
        :param heart_rate_variability_avg: The heart_rate_variability_avg of this NightlyRecharge.  # noqa: E501
        :type heart_rate_variability_avg: int
        :param breathing_rate_avg: The breathing_rate_avg of this NightlyRecharge.  # noqa: E501
        :type breathing_rate_avg: float
        :param nightly_recharge_status: The nightly_recharge_status of this NightlyRecharge.  # noqa: E501
        :type nightly_recharge_status: int
        :param ans_charge: The ans_charge of this NightlyRecharge.  # noqa: E501
        :type ans_charge: float
        :param ans_charge_status: The ans_charge_status of this NightlyRecharge.  # noqa: E501
        :type ans_charge_status: int
        :param hrv_samples: The hrv_samples of this NightlyRecharge.  # noqa: E501
        :type hrv_samples: object
        :param breathing_samples: The breathing_samples of this NightlyRecharge.  # noqa: E501
        :type breathing_samples: object
        """
        self.swagger_types = {
            'polar_user': str,
            '_date': date,
            'heart_rate_avg': int,
            'beat_to_beat_avg': int,
            'heart_rate_variability_avg': int,
            'breathing_rate_avg': float,
            'nightly_recharge_status': int,
            'ans_charge': float,
            'ans_charge_status': int,
            'hrv_samples': object,
            'breathing_samples': object
        }

        self.attribute_map = {
            'polar_user': 'polar_user',
            '_date': 'date',
            'heart_rate_avg': 'heart_rate_avg',
            'beat_to_beat_avg': 'beat_to_beat_avg',
            'heart_rate_variability_avg': 'heart_rate_variability_avg',
            'breathing_rate_avg': 'breathing_rate_avg',
            'nightly_recharge_status': 'nightly_recharge_status',
            'ans_charge': 'ans_charge',
            'ans_charge_status': 'ans_charge_status',
            'hrv_samples': 'hrv_samples',
            'breathing_samples': 'breathing_samples'
        }
        self._polar_user = polar_user
        self.__date = _date
        self._heart_rate_avg = heart_rate_avg
        self._beat_to_beat_avg = beat_to_beat_avg
        self._heart_rate_variability_avg = heart_rate_variability_avg
        self._breathing_rate_avg = breathing_rate_avg
        self._nightly_recharge_status = nightly_recharge_status
        self._ans_charge = ans_charge
        self._ans_charge_status = ans_charge_status
        self._hrv_samples = hrv_samples
        self._breathing_samples = breathing_samples

    @classmethod
    def from_dict(cls, dikt) -> 'NightlyRecharge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The nightly-recharge of this NightlyRecharge.  # noqa: E501
        :rtype: NightlyRecharge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def polar_user(self) -> str:
        """Gets the polar_user of this NightlyRecharge.

        Absolute link to user owning the sleep  # noqa: E501

        :return: The polar_user of this NightlyRecharge.
        :rtype: str
        """
        return self._polar_user

    @polar_user.setter
    def polar_user(self, polar_user: str):
        """Sets the polar_user of this NightlyRecharge.

        Absolute link to user owning the sleep  # noqa: E501

        :param polar_user: The polar_user of this NightlyRecharge.
        :type polar_user: str
        """

        self._polar_user = polar_user

    @property
    def _date(self) -> date:
        """Gets the _date of this NightlyRecharge.

        Result date of the Nightly Recharge  # noqa: E501

        :return: The _date of this NightlyRecharge.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this NightlyRecharge.

        Result date of the Nightly Recharge  # noqa: E501

        :param _date: The _date of this NightlyRecharge.
        :type _date: date
        """

        self.__date = _date

    @property
    def heart_rate_avg(self) -> int:
        """Gets the heart_rate_avg of this NightlyRecharge.

        Average heart rate as beats per minute (bpm) during a 4-hour period starting at 30 minutes after falling asleep.  # noqa: E501

        :return: The heart_rate_avg of this NightlyRecharge.
        :rtype: int
        """
        return self._heart_rate_avg

    @heart_rate_avg.setter
    def heart_rate_avg(self, heart_rate_avg: int):
        """Sets the heart_rate_avg of this NightlyRecharge.

        Average heart rate as beats per minute (bpm) during a 4-hour period starting at 30 minutes after falling asleep.  # noqa: E501

        :param heart_rate_avg: The heart_rate_avg of this NightlyRecharge.
        :type heart_rate_avg: int
        """

        self._heart_rate_avg = heart_rate_avg

    @property
    def beat_to_beat_avg(self) -> int:
        """Gets the beat_to_beat_avg of this NightlyRecharge.

        Average time in milliseconds (ms) between successive heart beats during a 4-hour period starting at 30 minutes after falling asleep.  # noqa: E501

        :return: The beat_to_beat_avg of this NightlyRecharge.
        :rtype: int
        """
        return self._beat_to_beat_avg

    @beat_to_beat_avg.setter
    def beat_to_beat_avg(self, beat_to_beat_avg: int):
        """Sets the beat_to_beat_avg of this NightlyRecharge.

        Average time in milliseconds (ms) between successive heart beats during a 4-hour period starting at 30 minutes after falling asleep.  # noqa: E501

        :param beat_to_beat_avg: The beat_to_beat_avg of this NightlyRecharge.
        :type beat_to_beat_avg: int
        """

        self._beat_to_beat_avg = beat_to_beat_avg

    @property
    def heart_rate_variability_avg(self) -> int:
        """Gets the heart_rate_variability_avg of this NightlyRecharge.

        Average variation in the time in milliseconds (ms) between successive heart beats during a 4-hour period starting at 30 minutes after falling asleep. The Heart rate variability is Root Mean Square of Successive Differences (RMSSD) in beat-to-beat intervals.  # noqa: E501

        :return: The heart_rate_variability_avg of this NightlyRecharge.
        :rtype: int
        """
        return self._heart_rate_variability_avg

    @heart_rate_variability_avg.setter
    def heart_rate_variability_avg(self, heart_rate_variability_avg: int):
        """Sets the heart_rate_variability_avg of this NightlyRecharge.

        Average variation in the time in milliseconds (ms) between successive heart beats during a 4-hour period starting at 30 minutes after falling asleep. The Heart rate variability is Root Mean Square of Successive Differences (RMSSD) in beat-to-beat intervals.  # noqa: E501

        :param heart_rate_variability_avg: The heart_rate_variability_avg of this NightlyRecharge.
        :type heart_rate_variability_avg: int
        """

        self._heart_rate_variability_avg = heart_rate_variability_avg

    @property
    def breathing_rate_avg(self) -> float:
        """Gets the breathing_rate_avg of this NightlyRecharge.

        Average breathing rate as breaths per minute (bpm) during a 4-hour period starting at 30 minutes after falling asleep.  # noqa: E501

        :return: The breathing_rate_avg of this NightlyRecharge.
        :rtype: float
        """
        return self._breathing_rate_avg

    @breathing_rate_avg.setter
    def breathing_rate_avg(self, breathing_rate_avg: float):
        """Sets the breathing_rate_avg of this NightlyRecharge.

        Average breathing rate as breaths per minute (bpm) during a 4-hour period starting at 30 minutes after falling asleep.  # noqa: E501

        :param breathing_rate_avg: The breathing_rate_avg of this NightlyRecharge.
        :type breathing_rate_avg: float
        """

        self._breathing_rate_avg = breathing_rate_avg

    @property
    def nightly_recharge_status(self) -> int:
        """Gets the nightly_recharge_status of this NightlyRecharge.

        The Nightly Recharge status shows how your body was able to recover from training and stress during the night. Scores for both ANS charge and sleep charge are taken into account. Nightly Recharge status has the following (6-item) scale: very poor (1) – poor (2) – compromised (3) – OK (4) – good (5) – very good (6).  # noqa: E501

        :return: The nightly_recharge_status of this NightlyRecharge.
        :rtype: int
        """
        return self._nightly_recharge_status

    @nightly_recharge_status.setter
    def nightly_recharge_status(self, nightly_recharge_status: int):
        """Sets the nightly_recharge_status of this NightlyRecharge.

        The Nightly Recharge status shows how your body was able to recover from training and stress during the night. Scores for both ANS charge and sleep charge are taken into account. Nightly Recharge status has the following (6-item) scale: very poor (1) – poor (2) – compromised (3) – OK (4) – good (5) – very good (6).  # noqa: E501

        :param nightly_recharge_status: The nightly_recharge_status of this NightlyRecharge.
        :type nightly_recharge_status: int
        """

        self._nightly_recharge_status = nightly_recharge_status

    @property
    def ans_charge(self) -> float:
        """Gets the ans_charge of this NightlyRecharge.

        ANS stands for autonomic nervous system. ANS charge is formed by measuring heart rate, heart rate variability and breathing rate during roughly the first four hours of your sleep. It is formed comparing your last night to your usual levels from the past 28 days. The scale is from -10.0 to +10.0. Around zero is your usual level.  # noqa: E501

        :return: The ans_charge of this NightlyRecharge.
        :rtype: float
        """
        return self._ans_charge

    @ans_charge.setter
    def ans_charge(self, ans_charge: float):
        """Sets the ans_charge of this NightlyRecharge.

        ANS stands for autonomic nervous system. ANS charge is formed by measuring heart rate, heart rate variability and breathing rate during roughly the first four hours of your sleep. It is formed comparing your last night to your usual levels from the past 28 days. The scale is from -10.0 to +10.0. Around zero is your usual level.  # noqa: E501

        :param ans_charge: The ans_charge of this NightlyRecharge.
        :type ans_charge: float
        """

        self._ans_charge = ans_charge

    @property
    def ans_charge_status(self) -> int:
        """Gets the ans_charge_status of this NightlyRecharge.

        ANS charge status = much below usual (1) - below usual (2) - usual (3) - above usual (4) - much above usual (5)  # noqa: E501

        :return: The ans_charge_status of this NightlyRecharge.
        :rtype: int
        """
        return self._ans_charge_status

    @ans_charge_status.setter
    def ans_charge_status(self, ans_charge_status: int):
        """Sets the ans_charge_status of this NightlyRecharge.

        ANS charge status = much below usual (1) - below usual (2) - usual (3) - above usual (4) - much above usual (5)  # noqa: E501

        :param ans_charge_status: The ans_charge_status of this NightlyRecharge.
        :type ans_charge_status: int
        """

        self._ans_charge_status = ans_charge_status

    @property
    def hrv_samples(self) -> object:
        """Gets the hrv_samples of this NightlyRecharge.

        5-minute average samples of heart rate variability. Unit of samples is milliseconds(ms).  # noqa: E501

        :return: The hrv_samples of this NightlyRecharge.
        :rtype: object
        """
        return self._hrv_samples

    @hrv_samples.setter
    def hrv_samples(self, hrv_samples: object):
        """Sets the hrv_samples of this NightlyRecharge.

        5-minute average samples of heart rate variability. Unit of samples is milliseconds(ms).  # noqa: E501

        :param hrv_samples: The hrv_samples of this NightlyRecharge.
        :type hrv_samples: object
        """

        self._hrv_samples = hrv_samples

    @property
    def breathing_samples(self) -> object:
        """Gets the breathing_samples of this NightlyRecharge.

        5-minute average samples of breathing rate. Unit of samples is breaths per minute (bpm).  # noqa: E501

        :return: The breathing_samples of this NightlyRecharge.
        :rtype: object
        """
        return self._breathing_samples

    @breathing_samples.setter
    def breathing_samples(self, breathing_samples: object):
        """Sets the breathing_samples of this NightlyRecharge.

        5-minute average samples of breathing rate. Unit of samples is breaths per minute (bpm).  # noqa: E501

        :param breathing_samples: The breathing_samples of this NightlyRecharge.
        :type breathing_samples: object
        """

        self._breathing_samples = breathing_samples

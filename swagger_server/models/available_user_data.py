# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AvailableUserData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: int=None, data_type: str=None, url: str=None):  # noqa: E501
        """AvailableUserData - a model defined in Swagger

        :param user_id: The user_id of this AvailableUserData.  # noqa: E501
        :type user_id: int
        :param data_type: The data_type of this AvailableUserData.  # noqa: E501
        :type data_type: str
        :param url: The url of this AvailableUserData.  # noqa: E501
        :type url: str
        """
        self.swagger_types = {
            'user_id': int,
            'data_type': str,
            'url': str
        }

        self.attribute_map = {
            'user_id': 'user-id',
            'data_type': 'data-type',
            'url': 'url'
        }
        self._user_id = user_id
        self._data_type = data_type
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'AvailableUserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AvailableUserData of this AvailableUserData.  # noqa: E501
        :rtype: AvailableUserData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this AvailableUserData.

        User identifier who has available data.  # noqa: E501

        :return: The user_id of this AvailableUserData.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this AvailableUserData.

        User identifier who has available data.  # noqa: E501

        :param user_id: The user_id of this AvailableUserData.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def data_type(self) -> str:
        """Gets the data_type of this AvailableUserData.

        Type of available data.  # noqa: E501

        :return: The data_type of this AvailableUserData.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: str):
        """Sets the data_type of this AvailableUserData.

        Type of available data.  # noqa: E501

        :param data_type: The data_type of this AvailableUserData.
        :type data_type: str
        """
        allowed_values = ["EXERCISE", "ACTIVITY_SUMMARY", "PHYSICAL_INFORMATION"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def url(self) -> str:
        """Gets the url of this AvailableUserData.

        URI pointing to transaction initiation endpoint for user  # noqa: E501

        :return: The url of this AvailableUserData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this AvailableUserData.

        URI pointing to transaction initiation endpoint for user  # noqa: E501

        :param url: The url of this AvailableUserData.
        :type url: str
        """

        self._url = url

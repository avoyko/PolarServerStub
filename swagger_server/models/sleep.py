# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Sleep(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, polar_user: str=None, _date: date=None, sleep_start_time: datetime=None, sleep_end_time: datetime=None, device_id: str=None, continuity: float=None, continuity_class: int=None, light_sleep: int=None, deep_sleep: int=None, rem_sleep: int=None, unrecognized_sleep_stage: int=None, sleep_score: int=None, total_interruption_duration: int=None, sleep_charge: int=None, sleep_goal: int=None, sleep_rating: int=None, short_interruption_duration: int=None, long_interruption_duration: int=None, sleep_cycles: int=None, group_duration_score: float=None, group_solidity_score: float=None, group_regeneration_score: float=None, hypnogram: object=None, heart_rate_samples: object=None):  # noqa: E501
        """Sleep - a model defined in Swagger

        :param polar_user: The polar_user of this Sleep.  # noqa: E501
        :type polar_user: str
        :param _date: The _date of this Sleep.  # noqa: E501
        :type _date: date
        :param sleep_start_time: The sleep_start_time of this Sleep.  # noqa: E501
        :type sleep_start_time: datetime
        :param sleep_end_time: The sleep_end_time of this Sleep.  # noqa: E501
        :type sleep_end_time: datetime
        :param device_id: The device_id of this Sleep.  # noqa: E501
        :type device_id: str
        :param continuity: The continuity of this Sleep.  # noqa: E501
        :type continuity: float
        :param continuity_class: The continuity_class of this Sleep.  # noqa: E501
        :type continuity_class: int
        :param light_sleep: The light_sleep of this Sleep.  # noqa: E501
        :type light_sleep: int
        :param deep_sleep: The deep_sleep of this Sleep.  # noqa: E501
        :type deep_sleep: int
        :param rem_sleep: The rem_sleep of this Sleep.  # noqa: E501
        :type rem_sleep: int
        :param unrecognized_sleep_stage: The unrecognized_sleep_stage of this Sleep.  # noqa: E501
        :type unrecognized_sleep_stage: int
        :param sleep_score: The sleep_score of this Sleep.  # noqa: E501
        :type sleep_score: int
        :param total_interruption_duration: The total_interruption_duration of this Sleep.  # noqa: E501
        :type total_interruption_duration: int
        :param sleep_charge: The sleep_charge of this Sleep.  # noqa: E501
        :type sleep_charge: int
        :param sleep_goal: The sleep_goal of this Sleep.  # noqa: E501
        :type sleep_goal: int
        :param sleep_rating: The sleep_rating of this Sleep.  # noqa: E501
        :type sleep_rating: int
        :param short_interruption_duration: The short_interruption_duration of this Sleep.  # noqa: E501
        :type short_interruption_duration: int
        :param long_interruption_duration: The long_interruption_duration of this Sleep.  # noqa: E501
        :type long_interruption_duration: int
        :param sleep_cycles: The sleep_cycles of this Sleep.  # noqa: E501
        :type sleep_cycles: int
        :param group_duration_score: The group_duration_score of this Sleep.  # noqa: E501
        :type group_duration_score: float
        :param group_solidity_score: The group_solidity_score of this Sleep.  # noqa: E501
        :type group_solidity_score: float
        :param group_regeneration_score: The group_regeneration_score of this Sleep.  # noqa: E501
        :type group_regeneration_score: float
        :param hypnogram: The hypnogram of this Sleep.  # noqa: E501
        :type hypnogram: object
        :param heart_rate_samples: The heart_rate_samples of this Sleep.  # noqa: E501
        :type heart_rate_samples: object
        """
        self.swagger_types = {
            'polar_user': str,
            '_date': date,
            'sleep_start_time': datetime,
            'sleep_end_time': datetime,
            'device_id': str,
            'continuity': float,
            'continuity_class': int,
            'light_sleep': int,
            'deep_sleep': int,
            'rem_sleep': int,
            'unrecognized_sleep_stage': int,
            'sleep_score': int,
            'total_interruption_duration': int,
            'sleep_charge': int,
            'sleep_goal': int,
            'sleep_rating': int,
            'short_interruption_duration': int,
            'long_interruption_duration': int,
            'sleep_cycles': int,
            'group_duration_score': float,
            'group_solidity_score': float,
            'group_regeneration_score': float,
            'hypnogram': object,
            'heart_rate_samples': object
        }

        self.attribute_map = {
            'polar_user': 'polar_user',
            '_date': 'date',
            'sleep_start_time': 'sleep_start_time',
            'sleep_end_time': 'sleep_end_time',
            'device_id': 'device_id',
            'continuity': 'continuity',
            'continuity_class': 'continuity_class',
            'light_sleep': 'light_sleep',
            'deep_sleep': 'deep_sleep',
            'rem_sleep': 'rem_sleep',
            'unrecognized_sleep_stage': 'unrecognized_sleep_stage',
            'sleep_score': 'sleep_score',
            'total_interruption_duration': 'total_interruption_duration',
            'sleep_charge': 'sleep_charge',
            'sleep_goal': 'sleep_goal',
            'sleep_rating': 'sleep_rating',
            'short_interruption_duration': 'short_interruption_duration',
            'long_interruption_duration': 'long_interruption_duration',
            'sleep_cycles': 'sleep_cycles',
            'group_duration_score': 'group_duration_score',
            'group_solidity_score': 'group_solidity_score',
            'group_regeneration_score': 'group_regeneration_score',
            'hypnogram': 'hypnogram',
            'heart_rate_samples': 'heart_rate_samples'
        }
        self._polar_user = polar_user
        self.__date = _date
        self._sleep_start_time = sleep_start_time
        self._sleep_end_time = sleep_end_time
        self._device_id = device_id
        self._continuity = continuity
        self._continuity_class = continuity_class
        self._light_sleep = light_sleep
        self._deep_sleep = deep_sleep
        self._rem_sleep = rem_sleep
        self._unrecognized_sleep_stage = unrecognized_sleep_stage
        self._sleep_score = sleep_score
        self._total_interruption_duration = total_interruption_duration
        self._sleep_charge = sleep_charge
        self._sleep_goal = sleep_goal
        self._sleep_rating = sleep_rating
        self._short_interruption_duration = short_interruption_duration
        self._long_interruption_duration = long_interruption_duration
        self._sleep_cycles = sleep_cycles
        self._group_duration_score = group_duration_score
        self._group_solidity_score = group_solidity_score
        self._group_regeneration_score = group_regeneration_score
        self._hypnogram = hypnogram
        self._heart_rate_samples = heart_rate_samples

    @classmethod
    def from_dict(cls, dikt) -> 'Sleep':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sleep of this Sleep.  # noqa: E501
        :rtype: Sleep
        """
        return util.deserialize_model(dikt, cls)

    @property
    def polar_user(self) -> str:
        """Gets the polar_user of this Sleep.

        Absolute link to user owning the sleep  # noqa: E501

        :return: The polar_user of this Sleep.
        :rtype: str
        """
        return self._polar_user

    @polar_user.setter
    def polar_user(self, polar_user: str):
        """Sets the polar_user of this Sleep.

        Absolute link to user owning the sleep  # noqa: E501

        :param polar_user: The polar_user of this Sleep.
        :type polar_user: str
        """

        self._polar_user = polar_user

    @property
    def _date(self) -> date:
        """Gets the _date of this Sleep.

        Result date of the sleep  # noqa: E501

        :return: The _date of this Sleep.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this Sleep.

        Result date of the sleep  # noqa: E501

        :param _date: The _date of this Sleep.
        :type _date: date
        """

        self.__date = _date

    @property
    def sleep_start_time(self) -> datetime:
        """Gets the sleep_start_time of this Sleep.

        Start timestamp of the sleep as ISO-8601 datetime string  # noqa: E501

        :return: The sleep_start_time of this Sleep.
        :rtype: datetime
        """
        return self._sleep_start_time

    @sleep_start_time.setter
    def sleep_start_time(self, sleep_start_time: datetime):
        """Sets the sleep_start_time of this Sleep.

        Start timestamp of the sleep as ISO-8601 datetime string  # noqa: E501

        :param sleep_start_time: The sleep_start_time of this Sleep.
        :type sleep_start_time: datetime
        """

        self._sleep_start_time = sleep_start_time

    @property
    def sleep_end_time(self) -> datetime:
        """Gets the sleep_end_time of this Sleep.

        End timestamp of the sleep as ISO-8601 datetime string  # noqa: E501

        :return: The sleep_end_time of this Sleep.
        :rtype: datetime
        """
        return self._sleep_end_time

    @sleep_end_time.setter
    def sleep_end_time(self, sleep_end_time: datetime):
        """Sets the sleep_end_time of this Sleep.

        End timestamp of the sleep as ISO-8601 datetime string  # noqa: E501

        :param sleep_end_time: The sleep_end_time of this Sleep.
        :type sleep_end_time: datetime
        """

        self._sleep_end_time = sleep_end_time

    @property
    def device_id(self) -> str:
        """Gets the device_id of this Sleep.

        Id of the device the sleep was measured with  # noqa: E501

        :return: The device_id of this Sleep.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this Sleep.

        Id of the device the sleep was measured with  # noqa: E501

        :param device_id: The device_id of this Sleep.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def continuity(self) -> float:
        """Gets the continuity of this Sleep.

        Continuity is an estimate of how continuous the sleep was on a scale of 1.0 – 5.0, where 5.0 reflects uninterrupted sleep. The lower the value the more fragmented the sleep was.  # noqa: E501

        :return: The continuity of this Sleep.
        :rtype: float
        """
        return self._continuity

    @continuity.setter
    def continuity(self, continuity: float):
        """Sets the continuity of this Sleep.

        Continuity is an estimate of how continuous the sleep was on a scale of 1.0 – 5.0, where 5.0 reflects uninterrupted sleep. The lower the value the more fragmented the sleep was.  # noqa: E501

        :param continuity: The continuity of this Sleep.
        :type continuity: float
        """

        self._continuity = continuity

    @property
    def continuity_class(self) -> int:
        """Gets the continuity_class of this Sleep.

        Verbal assessments of sleep continuity Very continuous sleep (5) Continuous sleep (4) Fairly continuous sleep (3) Fairly fragmented sleep (2) Fragmented sleep (1)  # noqa: E501

        :return: The continuity_class of this Sleep.
        :rtype: int
        """
        return self._continuity_class

    @continuity_class.setter
    def continuity_class(self, continuity_class: int):
        """Sets the continuity_class of this Sleep.

        Verbal assessments of sleep continuity Very continuous sleep (5) Continuous sleep (4) Fairly continuous sleep (3) Fairly fragmented sleep (2) Fragmented sleep (1)  # noqa: E501

        :param continuity_class: The continuity_class of this Sleep.
        :type continuity_class: int
        """

        self._continuity_class = continuity_class

    @property
    def light_sleep(self) -> int:
        """Gets the light_sleep of this Sleep.

        Total time in seconds spent in light sleep stage between when you fell asleep and when you woke up. Corresponds to N1+ N2 according to AASM classification.  # noqa: E501

        :return: The light_sleep of this Sleep.
        :rtype: int
        """
        return self._light_sleep

    @light_sleep.setter
    def light_sleep(self, light_sleep: int):
        """Sets the light_sleep of this Sleep.

        Total time in seconds spent in light sleep stage between when you fell asleep and when you woke up. Corresponds to N1+ N2 according to AASM classification.  # noqa: E501

        :param light_sleep: The light_sleep of this Sleep.
        :type light_sleep: int
        """

        self._light_sleep = light_sleep

    @property
    def deep_sleep(self) -> int:
        """Gets the deep_sleep of this Sleep.

        Total time in seconds spent in the deep sleep stage between when you fell asleep and when you woke up. Corresponds to N3 according to AASM classification.  # noqa: E501

        :return: The deep_sleep of this Sleep.
        :rtype: int
        """
        return self._deep_sleep

    @deep_sleep.setter
    def deep_sleep(self, deep_sleep: int):
        """Sets the deep_sleep of this Sleep.

        Total time in seconds spent in the deep sleep stage between when you fell asleep and when you woke up. Corresponds to N3 according to AASM classification.  # noqa: E501

        :param deep_sleep: The deep_sleep of this Sleep.
        :type deep_sleep: int
        """

        self._deep_sleep = deep_sleep

    @property
    def rem_sleep(self) -> int:
        """Gets the rem_sleep of this Sleep.

        Total time in seconds spent in REM sleep stage between when you fell asleep and when you woke up. REM stands for rapid eye movement.  # noqa: E501

        :return: The rem_sleep of this Sleep.
        :rtype: int
        """
        return self._rem_sleep

    @rem_sleep.setter
    def rem_sleep(self, rem_sleep: int):
        """Sets the rem_sleep of this Sleep.

        Total time in seconds spent in REM sleep stage between when you fell asleep and when you woke up. REM stands for rapid eye movement.  # noqa: E501

        :param rem_sleep: The rem_sleep of this Sleep.
        :type rem_sleep: int
        """

        self._rem_sleep = rem_sleep

    @property
    def unrecognized_sleep_stage(self) -> int:
        """Gets the unrecognized_sleep_stage of this Sleep.

        Total time in seconds spent in unrecognised sleep stage. Sometimes it's impossible to recognize sleep stages. This might happen when, for example, the wrist strap is not tight enough, or if you sleep on your hand.  # noqa: E501

        :return: The unrecognized_sleep_stage of this Sleep.
        :rtype: int
        """
        return self._unrecognized_sleep_stage

    @unrecognized_sleep_stage.setter
    def unrecognized_sleep_stage(self, unrecognized_sleep_stage: int):
        """Sets the unrecognized_sleep_stage of this Sleep.

        Total time in seconds spent in unrecognised sleep stage. Sometimes it's impossible to recognize sleep stages. This might happen when, for example, the wrist strap is not tight enough, or if you sleep on your hand.  # noqa: E501

        :param unrecognized_sleep_stage: The unrecognized_sleep_stage of this Sleep.
        :type unrecognized_sleep_stage: int
        """

        self._unrecognized_sleep_stage = unrecognized_sleep_stage

    @property
    def sleep_score(self) -> int:
        """Gets the sleep_score of this Sleep.

        Sleep score summarizes the amount and quality of your sleep into a single number on a scale of 1 – 100. Sleep score tells you how well you slept compared to the indicators of a good night's sleep based on the current sleep science. It consists of six components; sleep time, long interruptions, continuity, actual sleep, REM sleep, and deep sleep.  # noqa: E501

        :return: The sleep_score of this Sleep.
        :rtype: int
        """
        return self._sleep_score

    @sleep_score.setter
    def sleep_score(self, sleep_score: int):
        """Sets the sleep_score of this Sleep.

        Sleep score summarizes the amount and quality of your sleep into a single number on a scale of 1 – 100. Sleep score tells you how well you slept compared to the indicators of a good night's sleep based on the current sleep science. It consists of six components; sleep time, long interruptions, continuity, actual sleep, REM sleep, and deep sleep.  # noqa: E501

        :param sleep_score: The sleep_score of this Sleep.
        :type sleep_score: int
        """

        self._sleep_score = sleep_score

    @property
    def total_interruption_duration(self) -> int:
        """Gets the total_interruption_duration of this Sleep.

        The total time in seconds you spent awake between when you fell asleep and when you woke up.  # noqa: E501

        :return: The total_interruption_duration of this Sleep.
        :rtype: int
        """
        return self._total_interruption_duration

    @total_interruption_duration.setter
    def total_interruption_duration(self, total_interruption_duration: int):
        """Sets the total_interruption_duration of this Sleep.

        The total time in seconds you spent awake between when you fell asleep and when you woke up.  # noqa: E501

        :param total_interruption_duration: The total_interruption_duration of this Sleep.
        :type total_interruption_duration: int
        """

        self._total_interruption_duration = total_interruption_duration

    @property
    def sleep_charge(self) -> int:
        """Gets the sleep_charge of this Sleep.

        Sleep score compared to your usual level from the past 28 days.Scale: much below usual (1) – below usual (2) – usual (3) – above usual (4) – much above usual(5).  # noqa: E501

        :return: The sleep_charge of this Sleep.
        :rtype: int
        """
        return self._sleep_charge

    @sleep_charge.setter
    def sleep_charge(self, sleep_charge: int):
        """Sets the sleep_charge of this Sleep.

        Sleep score compared to your usual level from the past 28 days.Scale: much below usual (1) – below usual (2) – usual (3) – above usual (4) – much above usual(5).  # noqa: E501

        :param sleep_charge: The sleep_charge of this Sleep.
        :type sleep_charge: int
        """

        self._sleep_charge = sleep_charge

    @property
    def sleep_goal(self) -> int:
        """Gets the sleep_goal of this Sleep.

        Time goal in seconds for sleep selectedby user. A default value of the setting is based on age-related sleep duration recommendations.  # noqa: E501

        :return: The sleep_goal of this Sleep.
        :rtype: int
        """
        return self._sleep_goal

    @sleep_goal.setter
    def sleep_goal(self, sleep_goal: int):
        """Sets the sleep_goal of this Sleep.

        Time goal in seconds for sleep selectedby user. A default value of the setting is based on age-related sleep duration recommendations.  # noqa: E501

        :param sleep_goal: The sleep_goal of this Sleep.
        :type sleep_goal: int
        """

        self._sleep_goal = sleep_goal

    @property
    def sleep_rating(self) -> int:
        """Gets the sleep_rating of this Sleep.

        Numeric value given by user for representing the quality of sleep. Selection scale: Very poorly(1), poorly(2), ok(3), well(4), very well(5). 0 means no value is given.  # noqa: E501

        :return: The sleep_rating of this Sleep.
        :rtype: int
        """
        return self._sleep_rating

    @sleep_rating.setter
    def sleep_rating(self, sleep_rating: int):
        """Sets the sleep_rating of this Sleep.

        Numeric value given by user for representing the quality of sleep. Selection scale: Very poorly(1), poorly(2), ok(3), well(4), very well(5). 0 means no value is given.  # noqa: E501

        :param sleep_rating: The sleep_rating of this Sleep.
        :type sleep_rating: int
        """

        self._sleep_rating = sleep_rating

    @property
    def short_interruption_duration(self) -> int:
        """Gets the short_interruption_duration of this Sleep.

        Total time in seconds of short interruptions. Short interruption is interruption in sleep of less than 90 seconds.  # noqa: E501

        :return: The short_interruption_duration of this Sleep.
        :rtype: int
        """
        return self._short_interruption_duration

    @short_interruption_duration.setter
    def short_interruption_duration(self, short_interruption_duration: int):
        """Sets the short_interruption_duration of this Sleep.

        Total time in seconds of short interruptions. Short interruption is interruption in sleep of less than 90 seconds.  # noqa: E501

        :param short_interruption_duration: The short_interruption_duration of this Sleep.
        :type short_interruption_duration: int
        """

        self._short_interruption_duration = short_interruption_duration

    @property
    def long_interruption_duration(self) -> int:
        """Gets the long_interruption_duration of this Sleep.

        Total time in seconds of long interruptions. Long interruption is interruption in sleep of 90 seconds or more.  # noqa: E501

        :return: The long_interruption_duration of this Sleep.
        :rtype: int
        """
        return self._long_interruption_duration

    @long_interruption_duration.setter
    def long_interruption_duration(self, long_interruption_duration: int):
        """Sets the long_interruption_duration of this Sleep.

        Total time in seconds of long interruptions. Long interruption is interruption in sleep of 90 seconds or more.  # noqa: E501

        :param long_interruption_duration: The long_interruption_duration of this Sleep.
        :type long_interruption_duration: int
        """

        self._long_interruption_duration = long_interruption_duration

    @property
    def sleep_cycles(self) -> int:
        """Gets the sleep_cycles of this Sleep.

        Number of sleep cycles.  # noqa: E501

        :return: The sleep_cycles of this Sleep.
        :rtype: int
        """
        return self._sleep_cycles

    @sleep_cycles.setter
    def sleep_cycles(self, sleep_cycles: int):
        """Sets the sleep_cycles of this Sleep.

        Number of sleep cycles.  # noqa: E501

        :param sleep_cycles: The sleep_cycles of this Sleep.
        :type sleep_cycles: int
        """

        self._sleep_cycles = sleep_cycles

    @property
    def group_duration_score(self) -> float:
        """Gets the group_duration_score of this Sleep.

        Sleep score consists of six components that are grouped under three themes. Score for sleep duration theme looks at your sleep time compared to your ‘preferred sleep time’ setting and the age-related duration recommendations. Group duration score ranges from 1.0 to 100.0. It is interpreted as textual feedback: poor, moderate or good amount.  # noqa: E501

        :return: The group_duration_score of this Sleep.
        :rtype: float
        """
        return self._group_duration_score

    @group_duration_score.setter
    def group_duration_score(self, group_duration_score: float):
        """Sets the group_duration_score of this Sleep.

        Sleep score consists of six components that are grouped under three themes. Score for sleep duration theme looks at your sleep time compared to your ‘preferred sleep time’ setting and the age-related duration recommendations. Group duration score ranges from 1.0 to 100.0. It is interpreted as textual feedback: poor, moderate or good amount.  # noqa: E501

        :param group_duration_score: The group_duration_score of this Sleep.
        :type group_duration_score: float
        """

        self._group_duration_score = group_duration_score

    @property
    def group_solidity_score(self) -> float:
        """Gets the group_solidity_score of this Sleep.

        Sleep score consists of six components that are grouped under three themes. Score for sleep solidity theme is the average of the component scores of long interruptions, continuity and actual sleep. Group solidity score ranges from 1.0 to 100.0. It is interpreted as textual feedback: poor, moderate or good solidity.  # noqa: E501

        :return: The group_solidity_score of this Sleep.
        :rtype: float
        """
        return self._group_solidity_score

    @group_solidity_score.setter
    def group_solidity_score(self, group_solidity_score: float):
        """Sets the group_solidity_score of this Sleep.

        Sleep score consists of six components that are grouped under three themes. Score for sleep solidity theme is the average of the component scores of long interruptions, continuity and actual sleep. Group solidity score ranges from 1.0 to 100.0. It is interpreted as textual feedback: poor, moderate or good solidity.  # noqa: E501

        :param group_solidity_score: The group_solidity_score of this Sleep.
        :type group_solidity_score: float
        """

        self._group_solidity_score = group_solidity_score

    @property
    def group_regeneration_score(self) -> float:
        """Gets the group_regeneration_score of this Sleep.

        Sleep score consists of six components that are grouped under three themes. Score for regeneration theme is the average of the scores of REM sleep and deep sleep. Group regeneration score ranges from 1.0 to 100.0. It is interpreted as textual feedback: poor, moderate or good regeneration  # noqa: E501

        :return: The group_regeneration_score of this Sleep.
        :rtype: float
        """
        return self._group_regeneration_score

    @group_regeneration_score.setter
    def group_regeneration_score(self, group_regeneration_score: float):
        """Sets the group_regeneration_score of this Sleep.

        Sleep score consists of six components that are grouped under three themes. Score for regeneration theme is the average of the scores of REM sleep and deep sleep. Group regeneration score ranges from 1.0 to 100.0. It is interpreted as textual feedback: poor, moderate or good regeneration  # noqa: E501

        :param group_regeneration_score: The group_regeneration_score of this Sleep.
        :type group_regeneration_score: float
        """

        self._group_regeneration_score = group_regeneration_score

    @property
    def hypnogram(self) -> object:
        """Gets the hypnogram of this Sleep.

        The time span between when you fell asleep and when you woke up is classified into light, deep or REM sleep, or unrecognised or wake in 30-s epochs.  0 = WAKE, 1 = REM, 2 = LIGHTER NON-REM, 3 = LIGHT NON-REM, 4 = DEEP NON-REM, 5 = UNKNOWN (eg. due to bad skin contact).  # noqa: E501

        :return: The hypnogram of this Sleep.
        :rtype: object
        """
        return self._hypnogram

    @hypnogram.setter
    def hypnogram(self, hypnogram: object):
        """Sets the hypnogram of this Sleep.

        The time span between when you fell asleep and when you woke up is classified into light, deep or REM sleep, or unrecognised or wake in 30-s epochs.  0 = WAKE, 1 = REM, 2 = LIGHTER NON-REM, 3 = LIGHT NON-REM, 4 = DEEP NON-REM, 5 = UNKNOWN (eg. due to bad skin contact).  # noqa: E501

        :param hypnogram: The hypnogram of this Sleep.
        :type hypnogram: object
        """

        self._hypnogram = hypnogram

    @property
    def heart_rate_samples(self) -> object:
        """Gets the heart_rate_samples of this Sleep.

        5 min average samples of heart rate from the duration of the sleep. Default time between samples is 5 minutes. There may be periods with samples more often than every 5 minutes. Unit of samples is beats per minute (bpm).  # noqa: E501

        :return: The heart_rate_samples of this Sleep.
        :rtype: object
        """
        return self._heart_rate_samples

    @heart_rate_samples.setter
    def heart_rate_samples(self, heart_rate_samples: object):
        """Sets the heart_rate_samples of this Sleep.

        5 min average samples of heart rate from the duration of the sleep. Default time between samples is 5 minutes. There may be periods with samples more often than every 5 minutes. Unit of samples is beats per minute (bpm).  # noqa: E501

        :param heart_rate_samples: The heart_rate_samples of this Sleep.
        :type heart_rate_samples: object
        """

        self._heart_rate_samples = heart_rate_samples

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ecg_sample import EcgSample  # noqa: F401,E501
from swagger_server.models.quality_measurement import QualityMeasurement  # noqa: F401,E501
from swagger_server import util


class EcgTestResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source_device_id: str=None, test_time: int=None, time_zone_offset: int=None, average_heart_rate_bpm: int=None, heart_rate_variability_ms: float=None, heart_rate_variability_level: str=None, rri_ms: float=None, pulse_transit_time_systolic_ms: float=None, pulse_transit_time_diastolic_ms: float=None, pulse_transit_time_quality_index: float=None, samples: List[EcgSample]=None, quality_measurements: List[QualityMeasurement]=None):  # noqa: E501
        """EcgTestResult - a model defined in Swagger

        :param source_device_id: The source_device_id of this EcgTestResult.  # noqa: E501
        :type source_device_id: str
        :param test_time: The test_time of this EcgTestResult.  # noqa: E501
        :type test_time: int
        :param time_zone_offset: The time_zone_offset of this EcgTestResult.  # noqa: E501
        :type time_zone_offset: int
        :param average_heart_rate_bpm: The average_heart_rate_bpm of this EcgTestResult.  # noqa: E501
        :type average_heart_rate_bpm: int
        :param heart_rate_variability_ms: The heart_rate_variability_ms of this EcgTestResult.  # noqa: E501
        :type heart_rate_variability_ms: float
        :param heart_rate_variability_level: The heart_rate_variability_level of this EcgTestResult.  # noqa: E501
        :type heart_rate_variability_level: str
        :param rri_ms: The rri_ms of this EcgTestResult.  # noqa: E501
        :type rri_ms: float
        :param pulse_transit_time_systolic_ms: The pulse_transit_time_systolic_ms of this EcgTestResult.  # noqa: E501
        :type pulse_transit_time_systolic_ms: float
        :param pulse_transit_time_diastolic_ms: The pulse_transit_time_diastolic_ms of this EcgTestResult.  # noqa: E501
        :type pulse_transit_time_diastolic_ms: float
        :param pulse_transit_time_quality_index: The pulse_transit_time_quality_index of this EcgTestResult.  # noqa: E501
        :type pulse_transit_time_quality_index: float
        :param samples: The samples of this EcgTestResult.  # noqa: E501
        :type samples: List[EcgSample]
        :param quality_measurements: The quality_measurements of this EcgTestResult.  # noqa: E501
        :type quality_measurements: List[QualityMeasurement]
        """
        self.swagger_types = {
            'source_device_id': str,
            'test_time': int,
            'time_zone_offset': int,
            'average_heart_rate_bpm': int,
            'heart_rate_variability_ms': float,
            'heart_rate_variability_level': str,
            'rri_ms': float,
            'pulse_transit_time_systolic_ms': float,
            'pulse_transit_time_diastolic_ms': float,
            'pulse_transit_time_quality_index': float,
            'samples': List[EcgSample],
            'quality_measurements': List[QualityMeasurement]
        }

        self.attribute_map = {
            'source_device_id': 'source_device_id',
            'test_time': 'test_time',
            'time_zone_offset': 'time_zone_offset',
            'average_heart_rate_bpm': 'average_heart_rate_bpm',
            'heart_rate_variability_ms': 'heart_rate_variability_ms',
            'heart_rate_variability_level': 'heart_rate_variability_level',
            'rri_ms': 'rri_ms',
            'pulse_transit_time_systolic_ms': 'pulse_transit_time_systolic_ms',
            'pulse_transit_time_diastolic_ms': 'pulse_transit_time_diastolic_ms',
            'pulse_transit_time_quality_index': 'pulse_transit_time_quality_index',
            'samples': 'samples',
            'quality_measurements': 'quality_measurements'
        }
        self._source_device_id = source_device_id
        self._test_time = test_time
        self._time_zone_offset = time_zone_offset
        self._average_heart_rate_bpm = average_heart_rate_bpm
        self._heart_rate_variability_ms = heart_rate_variability_ms
        self._heart_rate_variability_level = heart_rate_variability_level
        self._rri_ms = rri_ms
        self._pulse_transit_time_systolic_ms = pulse_transit_time_systolic_ms
        self._pulse_transit_time_diastolic_ms = pulse_transit_time_diastolic_ms
        self._pulse_transit_time_quality_index = pulse_transit_time_quality_index
        self._samples = samples
        self._quality_measurements = quality_measurements

    @classmethod
    def from_dict(cls, dikt) -> 'EcgTestResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ecg-test-result of this EcgTestResult.  # noqa: E501
        :rtype: EcgTestResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_device_id(self) -> str:
        """Gets the source_device_id of this EcgTestResult.


        :return: The source_device_id of this EcgTestResult.
        :rtype: str
        """
        return self._source_device_id

    @source_device_id.setter
    def source_device_id(self, source_device_id: str):
        """Sets the source_device_id of this EcgTestResult.


        :param source_device_id: The source_device_id of this EcgTestResult.
        :type source_device_id: str
        """

        self._source_device_id = source_device_id

    @property
    def test_time(self) -> int:
        """Gets the test_time of this EcgTestResult.


        :return: The test_time of this EcgTestResult.
        :rtype: int
        """
        return self._test_time

    @test_time.setter
    def test_time(self, test_time: int):
        """Sets the test_time of this EcgTestResult.


        :param test_time: The test_time of this EcgTestResult.
        :type test_time: int
        """

        self._test_time = test_time

    @property
    def time_zone_offset(self) -> int:
        """Gets the time_zone_offset of this EcgTestResult.


        :return: The time_zone_offset of this EcgTestResult.
        :rtype: int
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset: int):
        """Sets the time_zone_offset of this EcgTestResult.


        :param time_zone_offset: The time_zone_offset of this EcgTestResult.
        :type time_zone_offset: int
        """

        self._time_zone_offset = time_zone_offset

    @property
    def average_heart_rate_bpm(self) -> int:
        """Gets the average_heart_rate_bpm of this EcgTestResult.


        :return: The average_heart_rate_bpm of this EcgTestResult.
        :rtype: int
        """
        return self._average_heart_rate_bpm

    @average_heart_rate_bpm.setter
    def average_heart_rate_bpm(self, average_heart_rate_bpm: int):
        """Sets the average_heart_rate_bpm of this EcgTestResult.


        :param average_heart_rate_bpm: The average_heart_rate_bpm of this EcgTestResult.
        :type average_heart_rate_bpm: int
        """

        self._average_heart_rate_bpm = average_heart_rate_bpm

    @property
    def heart_rate_variability_ms(self) -> float:
        """Gets the heart_rate_variability_ms of this EcgTestResult.


        :return: The heart_rate_variability_ms of this EcgTestResult.
        :rtype: float
        """
        return self._heart_rate_variability_ms

    @heart_rate_variability_ms.setter
    def heart_rate_variability_ms(self, heart_rate_variability_ms: float):
        """Sets the heart_rate_variability_ms of this EcgTestResult.


        :param heart_rate_variability_ms: The heart_rate_variability_ms of this EcgTestResult.
        :type heart_rate_variability_ms: float
        """

        self._heart_rate_variability_ms = heart_rate_variability_ms

    @property
    def heart_rate_variability_level(self) -> str:
        """Gets the heart_rate_variability_level of this EcgTestResult.


        :return: The heart_rate_variability_level of this EcgTestResult.
        :rtype: str
        """
        return self._heart_rate_variability_level

    @heart_rate_variability_level.setter
    def heart_rate_variability_level(self, heart_rate_variability_level: str):
        """Sets the heart_rate_variability_level of this EcgTestResult.


        :param heart_rate_variability_level: The heart_rate_variability_level of this EcgTestResult.
        :type heart_rate_variability_level: str
        """
        allowed_values = ["ECG_HRV_LEVEL_NO_BASELINE", "ECG_HRV_LEVEL_BELOW_USUAL", "ECG_HRV_LEVEL_USUAL", "ECG_HRV_LEVEL_ABOVE_USUAL"]  # noqa: E501
        if heart_rate_variability_level not in allowed_values:
            raise ValueError(
                "Invalid value for `heart_rate_variability_level` ({0}), must be one of {1}"
                .format(heart_rate_variability_level, allowed_values)
            )

        self._heart_rate_variability_level = heart_rate_variability_level

    @property
    def rri_ms(self) -> float:
        """Gets the rri_ms of this EcgTestResult.


        :return: The rri_ms of this EcgTestResult.
        :rtype: float
        """
        return self._rri_ms

    @rri_ms.setter
    def rri_ms(self, rri_ms: float):
        """Sets the rri_ms of this EcgTestResult.


        :param rri_ms: The rri_ms of this EcgTestResult.
        :type rri_ms: float
        """

        self._rri_ms = rri_ms

    @property
    def pulse_transit_time_systolic_ms(self) -> float:
        """Gets the pulse_transit_time_systolic_ms of this EcgTestResult.


        :return: The pulse_transit_time_systolic_ms of this EcgTestResult.
        :rtype: float
        """
        return self._pulse_transit_time_systolic_ms

    @pulse_transit_time_systolic_ms.setter
    def pulse_transit_time_systolic_ms(self, pulse_transit_time_systolic_ms: float):
        """Sets the pulse_transit_time_systolic_ms of this EcgTestResult.


        :param pulse_transit_time_systolic_ms: The pulse_transit_time_systolic_ms of this EcgTestResult.
        :type pulse_transit_time_systolic_ms: float
        """

        self._pulse_transit_time_systolic_ms = pulse_transit_time_systolic_ms

    @property
    def pulse_transit_time_diastolic_ms(self) -> float:
        """Gets the pulse_transit_time_diastolic_ms of this EcgTestResult.


        :return: The pulse_transit_time_diastolic_ms of this EcgTestResult.
        :rtype: float
        """
        return self._pulse_transit_time_diastolic_ms

    @pulse_transit_time_diastolic_ms.setter
    def pulse_transit_time_diastolic_ms(self, pulse_transit_time_diastolic_ms: float):
        """Sets the pulse_transit_time_diastolic_ms of this EcgTestResult.


        :param pulse_transit_time_diastolic_ms: The pulse_transit_time_diastolic_ms of this EcgTestResult.
        :type pulse_transit_time_diastolic_ms: float
        """

        self._pulse_transit_time_diastolic_ms = pulse_transit_time_diastolic_ms

    @property
    def pulse_transit_time_quality_index(self) -> float:
        """Gets the pulse_transit_time_quality_index of this EcgTestResult.


        :return: The pulse_transit_time_quality_index of this EcgTestResult.
        :rtype: float
        """
        return self._pulse_transit_time_quality_index

    @pulse_transit_time_quality_index.setter
    def pulse_transit_time_quality_index(self, pulse_transit_time_quality_index: float):
        """Sets the pulse_transit_time_quality_index of this EcgTestResult.


        :param pulse_transit_time_quality_index: The pulse_transit_time_quality_index of this EcgTestResult.
        :type pulse_transit_time_quality_index: float
        """

        self._pulse_transit_time_quality_index = pulse_transit_time_quality_index

    @property
    def samples(self) -> List[EcgSample]:
        """Gets the samples of this EcgTestResult.


        :return: The samples of this EcgTestResult.
        :rtype: List[EcgSample]
        """
        return self._samples

    @samples.setter
    def samples(self, samples: List[EcgSample]):
        """Sets the samples of this EcgTestResult.


        :param samples: The samples of this EcgTestResult.
        :type samples: List[EcgSample]
        """

        self._samples = samples

    @property
    def quality_measurements(self) -> List[QualityMeasurement]:
        """Gets the quality_measurements of this EcgTestResult.


        :return: The quality_measurements of this EcgTestResult.
        :rtype: List[QualityMeasurement]
        """
        return self._quality_measurements

    @quality_measurements.setter
    def quality_measurements(self, quality_measurements: List[QualityMeasurement]):
        """Sets the quality_measurements of this EcgTestResult.


        :param quality_measurements: The quality_measurements of this EcgTestResult.
        :type quality_measurements: List[QualityMeasurement]
        """

        self._quality_measurements = quality_measurements

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.heart_rate import HeartRate  # noqa: F401,E501
from swagger_server.models.location import Location  # noqa: F401,E501
from swagger_server.models.sample import Sample  # noqa: F401,E501
from swagger_server.models.training_load_pro_sample import TrainingLoadProSample  # noqa: F401,E501
from swagger_server.models.zone import Zone  # noqa: F401,E501
from swagger_server import util


class ExerciseHashId(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, upload_time: str=None, polar_user: str=None, device: str=None, device_id: str=None, start_time: str=None, start_time_utc_offset: int=None, duration: str=None, calories: int=None, distance: float=None, heart_rate: HeartRate=None, training_load: float=None, sport: str=None, has_route: bool=None, club_id: int=None, club_name: str=None, detailed_sport_info: str=None, fat_percentage: int=None, carbohydrate_percentage: int=None, protein_percentage: int=None, running_index: int=None, heart_rate_zones: List[Zone]=None, samples: List[Sample]=None, route: List[Location]=None, training_load_pro: List[TrainingLoadProSample]=None):  # noqa: E501
        """ExerciseHashId - a model defined in Swagger

        :param id: The id of this ExerciseHashId.  # noqa: E501
        :type id: str
        :param upload_time: The upload_time of this ExerciseHashId.  # noqa: E501
        :type upload_time: str
        :param polar_user: The polar_user of this ExerciseHashId.  # noqa: E501
        :type polar_user: str
        :param device: The device of this ExerciseHashId.  # noqa: E501
        :type device: str
        :param device_id: The device_id of this ExerciseHashId.  # noqa: E501
        :type device_id: str
        :param start_time: The start_time of this ExerciseHashId.  # noqa: E501
        :type start_time: str
        :param start_time_utc_offset: The start_time_utc_offset of this ExerciseHashId.  # noqa: E501
        :type start_time_utc_offset: int
        :param duration: The duration of this ExerciseHashId.  # noqa: E501
        :type duration: str
        :param calories: The calories of this ExerciseHashId.  # noqa: E501
        :type calories: int
        :param distance: The distance of this ExerciseHashId.  # noqa: E501
        :type distance: float
        :param heart_rate: The heart_rate of this ExerciseHashId.  # noqa: E501
        :type heart_rate: HeartRate
        :param training_load: The training_load of this ExerciseHashId.  # noqa: E501
        :type training_load: float
        :param sport: The sport of this ExerciseHashId.  # noqa: E501
        :type sport: str
        :param has_route: The has_route of this ExerciseHashId.  # noqa: E501
        :type has_route: bool
        :param club_id: The club_id of this ExerciseHashId.  # noqa: E501
        :type club_id: int
        :param club_name: The club_name of this ExerciseHashId.  # noqa: E501
        :type club_name: str
        :param detailed_sport_info: The detailed_sport_info of this ExerciseHashId.  # noqa: E501
        :type detailed_sport_info: str
        :param fat_percentage: The fat_percentage of this ExerciseHashId.  # noqa: E501
        :type fat_percentage: int
        :param carbohydrate_percentage: The carbohydrate_percentage of this ExerciseHashId.  # noqa: E501
        :type carbohydrate_percentage: int
        :param protein_percentage: The protein_percentage of this ExerciseHashId.  # noqa: E501
        :type protein_percentage: int
        :param running_index: The running_index of this ExerciseHashId.  # noqa: E501
        :type running_index: int
        :param heart_rate_zones: The heart_rate_zones of this ExerciseHashId.  # noqa: E501
        :type heart_rate_zones: List[Zone]
        :param samples: The samples of this ExerciseHashId.  # noqa: E501
        :type samples: List[Sample]
        :param route: The route of this ExerciseHashId.  # noqa: E501
        :type route: List[Location]
        :param training_load_pro: The training_load_pro of this ExerciseHashId.  # noqa: E501
        :type training_load_pro: List[TrainingLoadProSample]
        """
        self.swagger_types = {
            'id': str,
            'upload_time': str,
            'polar_user': str,
            'device': str,
            'device_id': str,
            'start_time': str,
            'start_time_utc_offset': int,
            'duration': str,
            'calories': int,
            'distance': float,
            'heart_rate': HeartRate,
            'training_load': float,
            'sport': str,
            'has_route': bool,
            'club_id': int,
            'club_name': str,
            'detailed_sport_info': str,
            'fat_percentage': int,
            'carbohydrate_percentage': int,
            'protein_percentage': int,
            'running_index': int,
            'heart_rate_zones': List[Zone],
            'samples': List[Sample],
            'route': List[Location],
            'training_load_pro': List[TrainingLoadProSample]
        }

        self.attribute_map = {
            'id': 'id',
            'upload_time': 'upload_time',
            'polar_user': 'polar_user',
            'device': 'device',
            'device_id': 'device_id',
            'start_time': 'start_time',
            'start_time_utc_offset': 'start_time_utc_offset',
            'duration': 'duration',
            'calories': 'calories',
            'distance': 'distance',
            'heart_rate': 'heart_rate',
            'training_load': 'training_load',
            'sport': 'sport',
            'has_route': 'has_route',
            'club_id': 'club_id',
            'club_name': 'club_name',
            'detailed_sport_info': 'detailed_sport_info',
            'fat_percentage': 'fat_percentage',
            'carbohydrate_percentage': 'carbohydrate_percentage',
            'protein_percentage': 'protein_percentage',
            'running_index': 'running-index',
            'heart_rate_zones': 'heart_rate_zones',
            'samples': 'samples',
            'route': 'route',
            'training_load_pro': 'training_load_pro'
        }
        self._id = id
        self._upload_time = upload_time
        self._polar_user = polar_user
        self._device = device
        self._device_id = device_id
        self._start_time = start_time
        self._start_time_utc_offset = start_time_utc_offset
        self._duration = duration
        self._calories = calories
        self._distance = distance
        self._heart_rate = heart_rate
        self._training_load = training_load
        self._sport = sport
        self._has_route = has_route
        self._club_id = club_id
        self._club_name = club_name
        self._detailed_sport_info = detailed_sport_info
        self._fat_percentage = fat_percentage
        self._carbohydrate_percentage = carbohydrate_percentage
        self._protein_percentage = protein_percentage
        self._running_index = running_index
        self._heart_rate_zones = heart_rate_zones
        self._samples = samples
        self._route = route
        self._training_load_pro = training_load_pro

    @classmethod
    def from_dict(cls, dikt) -> 'ExerciseHashId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The exerciseHashId of this ExerciseHashId.  # noqa: E501
        :rtype: ExerciseHashId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ExerciseHashId.

        Hashed id of the trainining session  # noqa: E501

        :return: The id of this ExerciseHashId.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ExerciseHashId.

        Hashed id of the trainining session  # noqa: E501

        :param id: The id of this ExerciseHashId.
        :type id: str
        """

        self._id = id

    @property
    def upload_time(self) -> str:
        """Gets the upload_time of this ExerciseHashId.

        Time of the transfer from wrist unit to Polar database  # noqa: E501

        :return: The upload_time of this ExerciseHashId.
        :rtype: str
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time: str):
        """Sets the upload_time of this ExerciseHashId.

        Time of the transfer from wrist unit to Polar database  # noqa: E501

        :param upload_time: The upload_time of this ExerciseHashId.
        :type upload_time: str
        """

        self._upload_time = upload_time

    @property
    def polar_user(self) -> str:
        """Gets the polar_user of this ExerciseHashId.

        Absolute link to Polar user owning the training  # noqa: E501

        :return: The polar_user of this ExerciseHashId.
        :rtype: str
        """
        return self._polar_user

    @polar_user.setter
    def polar_user(self, polar_user: str):
        """Sets the polar_user of this ExerciseHashId.

        Absolute link to Polar user owning the training  # noqa: E501

        :param polar_user: The polar_user of this ExerciseHashId.
        :type polar_user: str
        """

        self._polar_user = polar_user

    @property
    def device(self) -> str:
        """Gets the device of this ExerciseHashId.

        Polar product used in training  # noqa: E501

        :return: The device of this ExerciseHashId.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device: str):
        """Sets the device of this ExerciseHashId.

        Polar product used in training  # noqa: E501

        :param device: The device of this ExerciseHashId.
        :type device: str
        """

        self._device = device

    @property
    def device_id(self) -> str:
        """Gets the device_id of this ExerciseHashId.

        Id of the Polar device  # noqa: E501

        :return: The device_id of this ExerciseHashId.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this ExerciseHashId.

        Id of the Polar device  # noqa: E501

        :param device_id: The device_id of this ExerciseHashId.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def start_time(self) -> str:
        """Gets the start_time of this ExerciseHashId.

        Start time of the training session in local time  # noqa: E501

        :return: The start_time of this ExerciseHashId.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this ExerciseHashId.

        Start time of the training session in local time  # noqa: E501

        :param start_time: The start_time of this ExerciseHashId.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def start_time_utc_offset(self) -> int:
        """Gets the start_time_utc_offset of this ExerciseHashId.

        The offset from UTC (in minutes) when the training session was started  # noqa: E501

        :return: The start_time_utc_offset of this ExerciseHashId.
        :rtype: int
        """
        return self._start_time_utc_offset

    @start_time_utc_offset.setter
    def start_time_utc_offset(self, start_time_utc_offset: int):
        """Sets the start_time_utc_offset of this ExerciseHashId.

        The offset from UTC (in minutes) when the training session was started  # noqa: E501

        :param start_time_utc_offset: The start_time_utc_offset of this ExerciseHashId.
        :type start_time_utc_offset: int
        """

        self._start_time_utc_offset = start_time_utc_offset

    @property
    def duration(self) -> str:
        """Gets the duration of this ExerciseHashId.

        The duration of the training session as specified in ISO8601  # noqa: E501

        :return: The duration of this ExerciseHashId.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration: str):
        """Sets the duration of this ExerciseHashId.

        The duration of the training session as specified in ISO8601  # noqa: E501

        :param duration: The duration of this ExerciseHashId.
        :type duration: str
        """

        self._duration = duration

    @property
    def calories(self) -> int:
        """Gets the calories of this ExerciseHashId.

        Expended calories during training in kilocalories  # noqa: E501

        :return: The calories of this ExerciseHashId.
        :rtype: int
        """
        return self._calories

    @calories.setter
    def calories(self, calories: int):
        """Sets the calories of this ExerciseHashId.

        Expended calories during training in kilocalories  # noqa: E501

        :param calories: The calories of this ExerciseHashId.
        :type calories: int
        """

        self._calories = calories

    @property
    def distance(self) -> float:
        """Gets the distance of this ExerciseHashId.

        Distance in meters travelled during training  # noqa: E501

        :return: The distance of this ExerciseHashId.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance: float):
        """Sets the distance of this ExerciseHashId.

        Distance in meters travelled during training  # noqa: E501

        :param distance: The distance of this ExerciseHashId.
        :type distance: float
        """

        self._distance = distance

    @property
    def heart_rate(self) -> HeartRate:
        """Gets the heart_rate of this ExerciseHashId.


        :return: The heart_rate of this ExerciseHashId.
        :rtype: HeartRate
        """
        return self._heart_rate

    @heart_rate.setter
    def heart_rate(self, heart_rate: HeartRate):
        """Sets the heart_rate of this ExerciseHashId.


        :param heart_rate: The heart_rate of this ExerciseHashId.
        :type heart_rate: HeartRate
        """

        self._heart_rate = heart_rate

    @property
    def training_load(self) -> float:
        """Gets the training_load of this ExerciseHashId.

        Training load effect to user  # noqa: E501

        :return: The training_load of this ExerciseHashId.
        :rtype: float
        """
        return self._training_load

    @training_load.setter
    def training_load(self, training_load: float):
        """Sets the training_load of this ExerciseHashId.

        Training load effect to user  # noqa: E501

        :param training_load: The training_load of this ExerciseHashId.
        :type training_load: float
        """

        self._training_load = training_load

    @property
    def sport(self) -> str:
        """Gets the sport of this ExerciseHashId.

        Sport name  # noqa: E501

        :return: The sport of this ExerciseHashId.
        :rtype: str
        """
        return self._sport

    @sport.setter
    def sport(self, sport: str):
        """Sets the sport of this ExerciseHashId.

        Sport name  # noqa: E501

        :param sport: The sport of this ExerciseHashId.
        :type sport: str
        """

        self._sport = sport

    @property
    def has_route(self) -> bool:
        """Gets the has_route of this ExerciseHashId.

        Boolean indicating if the exercise has route data  # noqa: E501

        :return: The has_route of this ExerciseHashId.
        :rtype: bool
        """
        return self._has_route

    @has_route.setter
    def has_route(self, has_route: bool):
        """Sets the has_route of this ExerciseHashId.

        Boolean indicating if the exercise has route data  # noqa: E501

        :param has_route: The has_route of this ExerciseHashId.
        :type has_route: bool
        """

        self._has_route = has_route

    @property
    def club_id(self) -> int:
        """Gets the club_id of this ExerciseHashId.

        Has value if the exercise is from \"Flow For Club\", otherwise not printed. Value -1 indicates that there were errors finding the club  # noqa: E501

        :return: The club_id of this ExerciseHashId.
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id: int):
        """Sets the club_id of this ExerciseHashId.

        Has value if the exercise is from \"Flow For Club\", otherwise not printed. Value -1 indicates that there were errors finding the club  # noqa: E501

        :param club_id: The club_id of this ExerciseHashId.
        :type club_id: int
        """

        self._club_id = club_id

    @property
    def club_name(self) -> str:
        """Gets the club_name of this ExerciseHashId.

        Has value if the exercise is from \"Flow For Club\", otherwise not printed. Value \"Ambiguous club location. Please contact support.\" is printed in case of error (and the club-id is -1).  # noqa: E501

        :return: The club_name of this ExerciseHashId.
        :rtype: str
        """
        return self._club_name

    @club_name.setter
    def club_name(self, club_name: str):
        """Sets the club_name of this ExerciseHashId.

        Has value if the exercise is from \"Flow For Club\", otherwise not printed. Value \"Ambiguous club location. Please contact support.\" is printed in case of error (and the club-id is -1).  # noqa: E501

        :param club_name: The club_name of this ExerciseHashId.
        :type club_name: str
        """

        self._club_name = club_name

    @property
    def detailed_sport_info(self) -> str:
        """Gets the detailed_sport_info of this ExerciseHashId.

        String containing the name of a Polar Flow-compatible sport, if one is set for the exercise.  # noqa: E501

        :return: The detailed_sport_info of this ExerciseHashId.
        :rtype: str
        """
        return self._detailed_sport_info

    @detailed_sport_info.setter
    def detailed_sport_info(self, detailed_sport_info: str):
        """Sets the detailed_sport_info of this ExerciseHashId.

        String containing the name of a Polar Flow-compatible sport, if one is set for the exercise.  # noqa: E501

        :param detailed_sport_info: The detailed_sport_info of this ExerciseHashId.
        :type detailed_sport_info: str
        """

        self._detailed_sport_info = detailed_sport_info

    @property
    def fat_percentage(self) -> int:
        """Gets the fat_percentage of this ExerciseHashId.

        Fat percentage of exercise calories. Has value if the exercise is from training device supporting Energy sources, otherwise not printed.  # noqa: E501

        :return: The fat_percentage of this ExerciseHashId.
        :rtype: int
        """
        return self._fat_percentage

    @fat_percentage.setter
    def fat_percentage(self, fat_percentage: int):
        """Sets the fat_percentage of this ExerciseHashId.

        Fat percentage of exercise calories. Has value if the exercise is from training device supporting Energy sources, otherwise not printed.  # noqa: E501

        :param fat_percentage: The fat_percentage of this ExerciseHashId.
        :type fat_percentage: int
        """

        self._fat_percentage = fat_percentage

    @property
    def carbohydrate_percentage(self) -> int:
        """Gets the carbohydrate_percentage of this ExerciseHashId.

        Carbohydrate percentage of exercise calories. Has value if the exercise is from training device supporting Energy sources, otherwise not printed.  # noqa: E501

        :return: The carbohydrate_percentage of this ExerciseHashId.
        :rtype: int
        """
        return self._carbohydrate_percentage

    @carbohydrate_percentage.setter
    def carbohydrate_percentage(self, carbohydrate_percentage: int):
        """Sets the carbohydrate_percentage of this ExerciseHashId.

        Carbohydrate percentage of exercise calories. Has value if the exercise is from training device supporting Energy sources, otherwise not printed.  # noqa: E501

        :param carbohydrate_percentage: The carbohydrate_percentage of this ExerciseHashId.
        :type carbohydrate_percentage: int
        """

        self._carbohydrate_percentage = carbohydrate_percentage

    @property
    def protein_percentage(self) -> int:
        """Gets the protein_percentage of this ExerciseHashId.

        Protein percentage of exercise calories. Has value if the exercise is from training device supporting Energy sources, otherwise not printed.  # noqa: E501

        :return: The protein_percentage of this ExerciseHashId.
        :rtype: int
        """
        return self._protein_percentage

    @protein_percentage.setter
    def protein_percentage(self, protein_percentage: int):
        """Sets the protein_percentage of this ExerciseHashId.

        Protein percentage of exercise calories. Has value if the exercise is from training device supporting Energy sources, otherwise not printed.  # noqa: E501

        :param protein_percentage: The protein_percentage of this ExerciseHashId.
        :type protein_percentage: int
        """

        self._protein_percentage = protein_percentage

    @property
    def running_index(self) -> int:
        """Gets the running_index of this ExerciseHashId.

        <a href=\"https://support.polar.com/en/support/tips/Running_Index_feature#\"> Running index</a> is a score automatically calculated every run based on your heart rate and speed data collected via GPS or stride sensor.  # noqa: E501

        :return: The running_index of this ExerciseHashId.
        :rtype: int
        """
        return self._running_index

    @running_index.setter
    def running_index(self, running_index: int):
        """Sets the running_index of this ExerciseHashId.

        <a href=\"https://support.polar.com/en/support/tips/Running_Index_feature#\"> Running index</a> is a score automatically calculated every run based on your heart rate and speed data collected via GPS or stride sensor.  # noqa: E501

        :param running_index: The running_index of this ExerciseHashId.
        :type running_index: int
        """

        self._running_index = running_index

    @property
    def heart_rate_zones(self) -> List[Zone]:
        """Gets the heart_rate_zones of this ExerciseHashId.

        Heart rate zones for this exercise. Returned when query parameter 'zones=true' is used.  # noqa: E501

        :return: The heart_rate_zones of this ExerciseHashId.
        :rtype: List[Zone]
        """
        return self._heart_rate_zones

    @heart_rate_zones.setter
    def heart_rate_zones(self, heart_rate_zones: List[Zone]):
        """Sets the heart_rate_zones of this ExerciseHashId.

        Heart rate zones for this exercise. Returned when query parameter 'zones=true' is used.  # noqa: E501

        :param heart_rate_zones: The heart_rate_zones of this ExerciseHashId.
        :type heart_rate_zones: List[Zone]
        """

        self._heart_rate_zones = heart_rate_zones

    @property
    def samples(self) -> List[Sample]:
        """Gets the samples of this ExerciseHashId.

        List of all samples available for this exercise. Returned when query parameter 'samples=true' is used.  # noqa: E501

        :return: The samples of this ExerciseHashId.
        :rtype: List[Sample]
        """
        return self._samples

    @samples.setter
    def samples(self, samples: List[Sample]):
        """Sets the samples of this ExerciseHashId.

        List of all samples available for this exercise. Returned when query parameter 'samples=true' is used.  # noqa: E501

        :param samples: The samples of this ExerciseHashId.
        :type samples: List[Sample]
        """

        self._samples = samples

    @property
    def route(self) -> List[Location]:
        """Gets the route of this ExerciseHashId.

        List of all route points/locations available for this exercise. Returned when query parameter 'route=true' is used.  # noqa: E501

        :return: The route of this ExerciseHashId.
        :rtype: List[Location]
        """
        return self._route

    @route.setter
    def route(self, route: List[Location]):
        """Sets the route of this ExerciseHashId.

        List of all route points/locations available for this exercise. Returned when query parameter 'route=true' is used.  # noqa: E501

        :param route: The route of this ExerciseHashId.
        :type route: List[Location]
        """

        self._route = route

    @property
    def training_load_pro(self) -> List[TrainingLoadProSample]:
        """Gets the training_load_pro of this ExerciseHashId.


        :return: The training_load_pro of this ExerciseHashId.
        :rtype: List[TrainingLoadProSample]
        """
        return self._training_load_pro

    @training_load_pro.setter
    def training_load_pro(self, training_load_pro: List[TrainingLoadProSample]):
        """Sets the training_load_pro of this ExerciseHashId.


        :param training_load_pro: The training_load_pro of this ExerciseHashId.
        :type training_load_pro: List[TrainingLoadProSample]
        """

        self._training_load_pro = training_load_pro

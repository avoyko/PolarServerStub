# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WebhookPing(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, timestamp: datetime=None, event: str=None):  # noqa: E501
        """WebhookPing - a model defined in Swagger

        :param timestamp: The timestamp of this WebhookPing.  # noqa: E501
        :type timestamp: datetime
        :param event: The event of this WebhookPing.  # noqa: E501
        :type event: str
        """
        self.swagger_types = {
            'timestamp': datetime,
            'event': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'event': 'event'
        }
        self._timestamp = timestamp
        self._event = event

    @classmethod
    def from_dict(cls, dikt) -> 'WebhookPing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The webhookPing of this WebhookPing.  # noqa: E501
        :rtype: WebhookPing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this WebhookPing.

        Time when webhook ping is sent.  # noqa: E501

        :return: The timestamp of this WebhookPing.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this WebhookPing.

        Time when webhook ping is sent.  # noqa: E501

        :param timestamp: The timestamp of this WebhookPing.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def event(self) -> str:
        """Gets the event of this WebhookPing.

        Only possible value is PING for ping message.  # noqa: E501

        :return: The event of this WebhookPing.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event: str):
        """Sets the event of this WebhookPing.

        Only possible value is PING for ping message.  # noqa: E501

        :param event: The event of this WebhookPing.
        :type event: str
        """
        allowed_values = ["PING"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

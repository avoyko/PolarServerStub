# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Activity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, polar_user: str=None, transaction_id: int=None, _date: str=None, created: str=None, calories: int=None, active_calories: int=None, duration: str=None, active_steps: int=None):  # noqa: E501
        """Activity - a model defined in Swagger

        :param id: The id of this Activity.  # noqa: E501
        :type id: int
        :param polar_user: The polar_user of this Activity.  # noqa: E501
        :type polar_user: str
        :param transaction_id: The transaction_id of this Activity.  # noqa: E501
        :type transaction_id: int
        :param _date: The _date of this Activity.  # noqa: E501
        :type _date: str
        :param created: The created of this Activity.  # noqa: E501
        :type created: str
        :param calories: The calories of this Activity.  # noqa: E501
        :type calories: int
        :param active_calories: The active_calories of this Activity.  # noqa: E501
        :type active_calories: int
        :param duration: The duration of this Activity.  # noqa: E501
        :type duration: str
        :param active_steps: The active_steps of this Activity.  # noqa: E501
        :type active_steps: int
        """
        self.swagger_types = {
            'id': int,
            'polar_user': str,
            'transaction_id': int,
            '_date': str,
            'created': str,
            'calories': int,
            'active_calories': int,
            'duration': str,
            'active_steps': int
        }

        self.attribute_map = {
            'id': 'id',
            'polar_user': 'polar-user',
            'transaction_id': 'transaction-id',
            '_date': 'date',
            'created': 'created',
            'calories': 'calories',
            'active_calories': 'active-calories',
            'duration': 'duration',
            'active_steps': 'active-steps'
        }
        self._id = id
        self._polar_user = polar_user
        self._transaction_id = transaction_id
        self.__date = _date
        self._created = created
        self._calories = calories
        self._active_calories = active_calories
        self._duration = duration
        self._active_steps = active_steps

    @classmethod
    def from_dict(cls, dikt) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The activity of this Activity.  # noqa: E501
        :rtype: Activity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Activity.

        Activity summary id  # noqa: E501

        :return: The id of this Activity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Activity.

        Activity summary id  # noqa: E501

        :param id: The id of this Activity.
        :type id: int
        """

        self._id = id

    @property
    def polar_user(self) -> str:
        """Gets the polar_user of this Activity.

        Absolute link to user owning the activity  # noqa: E501

        :return: The polar_user of this Activity.
        :rtype: str
        """
        return self._polar_user

    @polar_user.setter
    def polar_user(self, polar_user: str):
        """Sets the polar_user of this Activity.

        Absolute link to user owning the activity  # noqa: E501

        :param polar_user: The polar_user of this Activity.
        :type polar_user: str
        """

        self._polar_user = polar_user

    @property
    def transaction_id(self) -> int:
        """Gets the transaction_id of this Activity.

        Id of the activity-transaction this training was transferred in  # noqa: E501

        :return: The transaction_id of this Activity.
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: int):
        """Sets the transaction_id of this Activity.

        Id of the activity-transaction this training was transferred in  # noqa: E501

        :param transaction_id: The transaction_id of this Activity.
        :type transaction_id: int
        """

        self._transaction_id = transaction_id

    @property
    def _date(self) -> str:
        """Gets the _date of this Activity.

        Date when activity summary was recorded, in format YYYY-MM-DD  # noqa: E501

        :return: The _date of this Activity.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Activity.

        Date when activity summary was recorded, in format YYYY-MM-DD  # noqa: E501

        :param _date: The _date of this Activity.
        :type _date: str
        """

        self.__date = _date

    @property
    def created(self) -> str:
        """Gets the created of this Activity.

        The time activity summary was created in AccessLink, in format YYYY-MM-DDTHH:mm:ss.SSS  # noqa: E501

        :return: The created of this Activity.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this Activity.

        The time activity summary was created in AccessLink, in format YYYY-MM-DDTHH:mm:ss.SSS  # noqa: E501

        :param created: The created of this Activity.
        :type created: str
        """

        self._created = created

    @property
    def calories(self) -> int:
        """Gets the calories of this Activity.

        Total daily calories in kilo calories including BMR  # noqa: E501

        :return: The calories of this Activity.
        :rtype: int
        """
        return self._calories

    @calories.setter
    def calories(self, calories: int):
        """Sets the calories of this Activity.

        Total daily calories in kilo calories including BMR  # noqa: E501

        :param calories: The calories of this Activity.
        :type calories: int
        """

        self._calories = calories

    @property
    def active_calories(self) -> int:
        """Gets the active_calories of this Activity.

        Total daily calories not including BMR. Precise calculation requires that user's physical data is entered into Polar Flow  # noqa: E501

        :return: The active_calories of this Activity.
        :rtype: int
        """
        return self._active_calories

    @active_calories.setter
    def active_calories(self, active_calories: int):
        """Sets the active_calories of this Activity.

        Total daily calories not including BMR. Precise calculation requires that user's physical data is entered into Polar Flow  # noqa: E501

        :param active_calories: The active_calories of this Activity.
        :type active_calories: int
        """

        self._active_calories = active_calories

    @property
    def duration(self) -> str:
        """Gets the duration of this Activity.

        The time interval as specified in ISO 8601  # noqa: E501

        :return: The duration of this Activity.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration: str):
        """Sets the duration of this Activity.

        The time interval as specified in ISO 8601  # noqa: E501

        :param duration: The duration of this Activity.
        :type duration: str
        """

        self._duration = duration

    @property
    def active_steps(self) -> int:
        """Gets the active_steps of this Activity.

        You could consider this as a kind of activity unit. If you take one step the active-steps should increase by one and any activity comparable to one physical step would also increase the number by one  # noqa: E501

        :return: The active_steps of this Activity.
        :rtype: int
        """
        return self._active_steps

    @active_steps.setter
    def active_steps(self, active_steps: int):
        """Sets the active_steps of this Activity.

        You could consider this as a kind of activity unit. If you take one step the active-steps should increase by one and any activity comparable to one physical step would also increase the number by one  # noqa: E501

        :param active_steps: The active_steps of this Activity.
        :type active_steps: int
        """

        self._active_steps = active_steps
